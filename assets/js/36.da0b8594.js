(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{381:function(e,t,n){"use strict";n.r(t);var s=n(9),a=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"kubernets-k8s-使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kubernets-k8s-使用"}},[e._v("#")]),e._v(" Kubernets（K8S） 使用")]),e._v(" "),t("h2",{attrs:{id:"环境说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#环境说明"}},[e._v("#")]),e._v(" 环境说明")]),e._v(" "),t("ul",[t("li",[e._v("CentOS 7.5（不准确地说：要求必须是 CentOS 7 64位）")]),e._v(" "),t("li",[e._v("Docker")])]),e._v(" "),t("h2",{attrs:{id:"kubernetes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes"}},[e._v("#")]),e._v(" Kubernetes")]),e._v(" "),t("ul",[t("li",[e._v("目前流行的容器编排系统")]),e._v(" "),t("li",[e._v("简称：K8S")]),e._v(" "),t("li",[e._v("官网："),t("a",{attrs:{href:"https://kubernetes.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://kubernetes.io/"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("主要解决几个问题：\n"),t("ul",[t("li",[t("code",[e._v("调度")])]),e._v(" "),t("li",[t("code",[e._v("生命周期及健康状况")])]),e._v(" "),t("li",[t("code",[e._v("服务发现")])]),e._v(" "),t("li",[t("code",[e._v("监控")])]),e._v(" "),t("li",[t("code",[e._v("认证")])]),e._v(" "),t("li",[t("code",[e._v("容器聚合")])])])]),e._v(" "),t("li",[e._v("主要角色：Master、Node")])]),e._v(" "),t("h4",{attrs:{id:"安装准备-kubernetes-1-13-版本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装准备-kubernetes-1-13-版本"}},[e._v("#")]),e._v(" 安装准备 - Kubernetes 1.13 版本")]),e._v(" "),t("ul",[t("li",[e._v("推荐最低 2C2G，优先：2C4G 或以上")]),e._v(" "),t("li",[e._v("特别说明：1.13 之前的版本，由于网络问题，需要各种设置，这里就不再多说了。1.13 之后相对就简单了点。")]),e._v(" "),t("li",[e._v("优先官网软件包：kubeadm")]),e._v(" "),t("li",[e._v("官网资料：\n"),t("ul",[t("li",[e._v("issues 入口："),t("a",{attrs:{href:"https://github.com/kubernetes/kubeadm",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/kubernetes/kubeadm"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("源码入口："),t("a",{attrs:{href:"https://github.com/kubernetes/kubernetes/tree/master/cmd/kubeadm",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/kubernetes/kubernetes/tree/master/cmd/kubeadm"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("安装指导："),t("a",{attrs:{href:"https://kubernetes.io/docs/setup/independent/install-kubeadm/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://kubernetes.io/docs/setup/independent/install-kubeadm/"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("按官网要求做下检查："),t("a",{attrs:{href:"https://kubernetes.io/docs/setup/independent/install-kubeadm/#before-you-begin",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://kubernetes.io/docs/setup/independent/install-kubeadm/#before-you-begin"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("网络环境："),t("a",{attrs:{href:"https://kubernetes.io/docs/setup/independent/install-kubeadm/#verify-the-mac-address-and-product-uuid-are-unique-for-every-node",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://kubernetes.io/docs/setup/independent/install-kubeadm/#verify-the-mac-address-and-product-uuid-are-unique-for-every-node"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("端口检查："),t("a",{attrs:{href:"https://kubernetes.io/docs/setup/independent/install-kubeadm/#check-required-ports",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://kubernetes.io/docs/setup/independent/install-kubeadm/#check-required-ports"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("strong",[e._v("对 Docker 版本的支持，这里官网推荐的是 18.06")]),e._v("："),t("a",{attrs:{href:"https://kubernetes.io/docs/setup/release/notes/#sig-cluster-lifecycle",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://kubernetes.io/docs/setup/release/notes/#sig-cluster-lifecycle"),t("OutboundLink")],1)])])]),e._v(" "),t("li",[e._v("三大核心工具包，都需要各自安装，并且注意版本关系：\n"),t("ul",[t("li",[t("code",[e._v("kubeadm")]),e._v(": the command to bootstrap the cluster.\n"),t("ul",[t("li",[e._v("集群部署、管理工具")])])]),e._v(" "),t("li",[t("code",[e._v("kubelet")]),e._v(": the component that runs on all of the machines in your cluster and does things like starting pods and containers.\n"),t("ul",[t("li",[e._v("具体执行层面的管理 Pod 和 Docker 工具")])])]),e._v(" "),t("li",[t("code",[e._v("kubectl")]),e._v(": the command line util to talk to your cluster.\n"),t("ul",[t("li",[e._v("操作 k8s 的命令行入口工具")])])])])]),e._v(" "),t("li",[e._v("官网插件安装过程的故障排查："),t("a",{attrs:{href:"https://kubernetes.io/docs/setup/independent/troubleshooting-kubeadm/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://kubernetes.io/docs/setup/independent/troubleshooting-kubeadm/"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("其他部署方案：\n"),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/coreos/tectonic-installer",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/coreos/tectonic-installer"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/kubernetes-incubator/kubespray",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/kubernetes-incubator/kubespray"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/apprenda/kismatic",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/apprenda/kismatic"),t("OutboundLink")],1)])])])]),e._v(" "),t("h4",{attrs:{id:"开始安装-kubernetes-1-13-3-版本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开始安装-kubernetes-1-13-3-版本"}},[e._v("#")]),e._v(" 开始安装 - Kubernetes 1.13.3 版本")]),e._v(" "),t("ul",[t("li",[e._v("三台机子：\n"),t("ul",[t("li",[e._v("master-1："),t("code",[e._v("192.168.0.127")])]),e._v(" "),t("li",[e._v("node-1："),t("code",[e._v("192.168.0.128")])]),e._v(" "),t("li",[e._v("node-2："),t("code",[e._v("192.168.0.129")])])])]),e._v(" "),t("li",[e._v("官网最新版本："),t("a",{attrs:{href:"https://github.com/kubernetes/kubernetes/releases",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/kubernetes/kubernetes/releases"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("官网 1.13 版本的 changelog："),t("a",{attrs:{href:"https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.13.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.13.md"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("strong",[e._v("所有节点安装 Docker 18.06，并设置阿里云源")]),e._v(" "),t("ul",[t("li",[e._v("可以参考："),t("a",{attrs:{href:"https://github.com/judasn/Linux-Tutorial/blob/master/favorite-file/shell/install_docker_k8s_disable_firewalld_centos7-aliyun.sh",target:"_blank",rel:"noopener noreferrer"}},[e._v("点击我o(∩_∩)o "),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("核心，查看可以安装的 Docker 列表："),t("code",[e._v("yum list docker-ce --showduplicates")])])])]),e._v(" "),t("li",[e._v("所有节点设置 kubernetes repo 源，并安装 Kubeadm、Kubelet、Kubectl 都设置阿里云的源")]),e._v(" "),t("li",[e._v("Kubeadm 初始化集群过程当中，它会下载很多的镜像，默认也是去 Google 家里下载。但是 1.13 新增了一个配置："),t("code",[e._v("--image-repository")]),e._v(" 算是救了命。")])]),e._v(" "),t("h4",{attrs:{id:"安装具体流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装具体流程"}},[e._v("#")]),e._v(" 安装具体流程")]),e._v(" "),t("ul",[t("li",[e._v("同步所有机子时间："),t("code",[e._v("systemctl start chronyd.service && systemctl enable chronyd.service")])]),e._v(" "),t("li",[e._v("所有机子禁用防火墙、selinux、swap")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("systemctl stop firewalld.service\nsystemctl disable firewalld.service\nsystemctl disable iptables.service\n\niptables -P FORWARD ACCEPT\n\nsetenforce 0 && sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config\n\necho \"vm.swappiness = 0\" >> /etc/sysctl.conf\nswapoff -a && sysctl -w vm.swappiness=0\n")])])]),t("ul",[t("li",[e._v("给各自机子设置 hostname 和 hosts")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("hostnamectl --static set-hostname  k8s-master-1\nhostnamectl --static set-hostname  k8s-node-1\nhostnamectl --static set-hostname  k8s-node-2\n\n\nvim /etc/hosts\n192.168.0.127 k8s-master-1\n192.168.0.128 k8s-node-1\n192.168.0.129 k8s-node-2\n")])])]),t("ul",[t("li",[e._v("给 master 设置免密")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("ssh-keygen -t rsa\n\ncat /root/.ssh/id_rsa.pub >> /root/.ssh/authorized_keys\n\n\nssh localhost\n\nssh-copy-id -i ~/.ssh/id_rsa.pub -p 22 root@k8s-node-1（根据提示输入 k8s-node-1 密码）\nssh-copy-id -i ~/.ssh/id_rsa.pub -p 22 root@k8s-node-2（根据提示输入 k8s-node-2 密码）\n\nssh k8s-master-1\nssh k8s-node-1\nssh k8s-node-2\n")])])]),t("ul",[t("li",[e._v("给所有机子设置 yum 源")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("vim /etc/yum.repos.d/kubernetes.repo\n\n[kubernetes]\nname=Kubernetes\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\n\n\nscp -r /etc/yum.repos.d/kubernetes.repo root@k8s-node-1:/etc/yum.repos.d/\nscp -r /etc/yum.repos.d/kubernetes.repo root@k8s-node-2:/etc/yum.repos.d/\n")])])]),t("ul",[t("li",[e._v("给 master 机子创建 flannel 配置文件")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('mkdir -p /etc/cni/net.d && vim /etc/cni/net.d/10-flannel.conflist\n\n{\n    "name": "cbr0",\n    "plugins": [\n        {\n            "type": "flannel",\n            "delegate": {\n                "hairpinMode": true,\n                "isDefaultGateway": true\n            }\n        },\n        {\n            "type": "portmap",\n            "capabilities": {\n                "portMappings": true\n            }\n        }\n    ]\n}\n')])])]),t("ul",[t("li",[e._v("给所有机子创建配置")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("vim /etc/sysctl.d/k8s.conf\n\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nnet.ipv4.ip_forward=1\nvm.swappiness=0\n\n\nscp -r /etc/sysctl.d/k8s.conf root@k8s-node-1:/etc/sysctl.d/\nscp -r /etc/sysctl.d/k8s.conf root@k8s-node-2:/etc/sysctl.d/\n\nmodprobe br_netfilter && sysctl -p /etc/sysctl.d/k8s.conf\n")])])]),t("ul",[t("li",[e._v("给所有机子安装组件")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("yum install -y kubelet-1.13.3 kubeadm-1.13.3 kubectl-1.13.3 --disableexcludes=kubernetes\n")])])]),t("ul",[t("li",[e._v("给所有机子添加一个变量")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('vim  /etc/systemd/system/kubelet.service.d/10-kubeadm.conf\n\n最后一行添加：Environment="KUBELET_CGROUP_ARGS=--cgroup-driver=cgroupfs"\n')])])]),t("ul",[t("li",[e._v("启动所有机子")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("systemctl enable kubelet && systemctl start kubelet\n\nkubeadm version\nkubectl version\n\n")])])]),t("ul",[t("li",[e._v("初始化 master 节点：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('echo 1 > /proc/sys/net/ipv4/ip_forward\n\n\nkubeadm init \\\n--image-repository registry.cn-hangzhou.aliyuncs.com/google_containers \\\n--pod-network-cidr 10.244.0.0/16 \\\n--kubernetes-version 1.13.3 \\\n--ignore-preflight-errors=Swap\n\n其中 10.244.0.0/16 是 flannel 插件固定使用的ip段，它的值取决于你准备安装哪个网络插件\n\n这个过程会下载一些 docker 镜像，时间可能会比较久，看你网络情况。\n终端会输出核心内容：\n[init] Using Kubernetes version: v1.13.3\n[preflight] Running pre-flight checks\n[preflight] Pulling images required for setting up a Kubernetes cluster\n[preflight] This might take a minute or two, depending on the speed of your internet connection\n[preflight] You can also perform this action in beforehand using \'kubeadm config images pull\'\n[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"\n[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"\n[kubelet-start] Activating the kubelet service\n[certs] Using certificateDir folder "/etc/kubernetes/pki"\n[certs] Generating "front-proxy-ca" certificate and key\n[certs] Generating "front-proxy-client" certificate and key\n[certs] Generating "etcd/ca" certificate and key\n[certs] Generating "etcd/server" certificate and key\n[certs] etcd/server serving cert is signed for DNS names [k8s-master-1 localhost] and IPs [192.168.0.127 127.0.0.1 ::1]\n[certs] Generating "etcd/peer" certificate and key\n[certs] etcd/peer serving cert is signed for DNS names [k8s-master-1 localhost] and IPs [192.168.0.127 127.0.0.1 ::1]\n[certs] Generating "etcd/healthcheck-client" certificate and key\n[certs] Generating "apiserver-etcd-client" certificate and key\n[certs] Generating "ca" certificate and key\n[certs] Generating "apiserver-kubelet-client" certificate and key\n[certs] Generating "apiserver" certificate and key\n[certs] apiserver serving cert is signed for DNS names [k8s-master-1 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.0.127]\n[certs] Generating "sa" key and public key\n[kubeconfig] Using kubeconfig folder "/etc/kubernetes"\n[kubeconfig] Writing "admin.conf" kubeconfig file\n[kubeconfig] Writing "kubelet.conf" kubeconfig file\n[kubeconfig] Writing "controller-manager.conf" kubeconfig file\n[kubeconfig] Writing "scheduler.conf" kubeconfig file\n[control-plane] Using manifest folder "/etc/kubernetes/manifests"\n[control-plane] Creating static Pod manifest for "kube-apiserver"\n[control-plane] Creating static Pod manifest for "kube-controller-manager"\n[control-plane] Creating static Pod manifest for "kube-scheduler"\n[etcd] Creating static Pod manifest for local etcd in "/etc/kubernetes/manifests"\n[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory "/etc/kubernetes/manifests". This can take up to 4m0s\n[apiclient] All control plane components are healthy after 19.001686 seconds\n[uploadconfig] storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace\n[kubelet] Creating a ConfigMap "kubelet-config-1.13" in namespace kube-system with the configuration for the kubelets in the cluster\n[patchnode] Uploading the CRI Socket information "/var/run/dockershim.sock" to the Node API object "k8s-master-1" as an annotation\n[mark-control-plane] Marking the node k8s-master-1 as control-plane by adding the label "node-role.kubernetes.io/master=\'\'"\n[mark-control-plane] Marking the node k8s-master-1 as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]\n[bootstrap-token] Using token: 8tpo9l.jlw135r8559kaad4\n[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles\n[bootstraptoken] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials\n[bootstraptoken] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token\n[bootstraptoken] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster\n[bootstraptoken] creating the "cluster-info" ConfigMap in the "kube-public" namespace\n[addons] Applied essential addon: CoreDNS\n[addons] Applied essential addon: kube-proxy\n\nYour Kubernetes master has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  mkdir -p $HOME/.kube\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\n\nYou should now deploy a pod network to the cluster.\nRun "kubectl apply -f [podnetwork].yaml" with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nYou can now join any number of machines by running the following on each node\nas root:\n\n  kubeadm join 192.168.0.127:6443 --token 8tpo9l.jlw135r8559kaad4 --discovery-token-ca-cert-hash sha256:d6594ccc1310a45cbebc45f1c93f5ac113873786365ed63efcf667c952d7d197\n')])])]),t("ul",[t("li",[e._v("给 master 机子设置配置")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("mkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\nexport KUBECONFIG=$HOME/.kube/config\n")])])]),t("ul",[t("li",[e._v("在 master 上查看一些环境")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("kubeadm token list\n\nkubectl cluster-info\n")])])]),t("ul",[t("li",[e._v("给 master 安装 Flannel")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("cd /opt && wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\n\nkubectl apply -f /opt/kube-flannel.yml\n")])])]),t("ul",[t("li",[e._v("到 node 节点加入集群：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('echo 1 > /proc/sys/net/bridge/bridge-nf-call-iptables\n\nkubeadm join 192.168.0.127:6443 --token 8tpo9l.jlw135r8559kaad4 --discovery-token-ca-cert-hash sha256:d6594ccc1310a45cbebc45f1c93f5ac113873786365ed63efcf667c952d7d197\n\n这时候终端会输出：\n\n[preflight] Running pre-flight checks\n[discovery] Trying to connect to API Server "192.168.0.127:6443"\n[discovery] Created cluster-info discovery client, requesting info from "https://192.168.0.127:6443"\n[discovery] Requesting info from "https://192.168.0.127:6443" again to validate TLS against the pinned public key\n[discovery] Cluster info signature and contents are valid and TLS certificate validates against pinned roots, will use API Server "192.168.0.127:6443"\n[discovery] Successfully established connection with API Server "192.168.0.127:6443"\n[join] Reading configuration from the cluster...\n[join] FYI: You can look at this config file with \'kubectl -n kube-system get cm kubeadm-config -oyaml\'\n[kubelet] Downloading configuration for the kubelet from the "kubelet-config-1.13" ConfigMap in the kube-system namespace\n[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"\n[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"\n[kubelet-start] Activating the kubelet service\n[tlsbootstrap] Waiting for the kubelet to perform the TLS Bootstrap...\n[patchnode] Uploading the CRI Socket information "/var/run/dockershim.sock" to the Node API object "k8s-node-1" as an annotation\n\nThis node has joined the cluster:\n* Certificate signing request was sent to apiserver and a response was received.\n* The Kubelet was informed of the new secure connection details.\n\nRun \'kubectl get nodes\' on the master to see this node join the cluster.\n')])])]),t("ul",[t("li",[e._v("如果 node 节点加入失败，可以："),t("code",[e._v("kubeadm reset")]),e._v("，再来重新 join")]),e._v(" "),t("li",[e._v("在 master 节点上："),t("code",[e._v("kubectl get cs")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('NAME                 STATUS    MESSAGE              ERROR\ncontroller-manager   Healthy   ok\nscheduler            Healthy   ok\netcd-0               Healthy   {"health": "true"} \n结果都是 Healthy 则表示可以了，不然就得检查。必要时可以用：`kubeadm reset` 重置，重新进行集群初始化\n')])])]),t("ul",[t("li",[e._v("在 master 节点上："),t("code",[e._v("kubectl get nodes")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("如果还是 NotReady，则查看错误信息：kubectl get pods --all-namespaces\n其中：Pending/ContainerCreating/ImagePullBackOff 都是 Pod 没有就绪，我们可以这样查看对应 Pod 遇到了什么问题\nkubectl describe pod <Pod Name> --namespace=kube-system\n或者：kubectl logs <Pod Name> -n kube-system\ntail -f /var/log/messages\n")])])]),t("h4",{attrs:{id:"主要概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#主要概念"}},[e._v("#")]),e._v(" 主要概念")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Master 节点，负责集群的调度、集群的管理")]),e._v(" "),t("ul",[t("li",[e._v("常见组件："),t("a",{attrs:{href:"https://kubernetes.io/docs/concepts/overview/components/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://kubernetes.io/docs/concepts/overview/components/"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("kube-apiserver：API服务")]),e._v(" "),t("li",[e._v("kube-scheduler：调度")]),e._v(" "),t("li",[e._v("Kube-Controller-Manager：容器编排")]),e._v(" "),t("li",[e._v("Etcd：保存了整个集群的状态")]),e._v(" "),t("li",[e._v("Kube-proxy：负责为 Service 提供 cluster 内部的服务发现和负载均衡")]),e._v(" "),t("li",[e._v("Kube-DNS：负责为整个集群提供 DNS 服务")])])]),e._v(" "),t("li",[t("p",[e._v("node 节点，负责容器相关的处理")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("Pods")])])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("创建，调度以及管理的最小单元\n共存的一组容器的集合\n容器共享PID，网络，IPC以及UTS命名空间\n容器共享存储卷\n短暂存在\n")])])]),t("ul",[t("li",[t("code",[e._v("Volumes")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("数据持久化\nPod中容器共享数据\n生命周期\n支持多种类型的数据卷 – emptyDir, hostpath, gcePersistentDisk, awsElasticBlockStore, nfs, iscsi, glusterfs, secrets\n")])])]),t("ul",[t("li",[t("code",[e._v("Labels")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("用以标示对象（如Pod）的key/value对\n组织并选择对象子集\n")])])]),t("ul",[t("li",[t("code",[e._v("Replication Controllers")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("确保在任一时刻运行指定数目的Pod\n容器重新调度\n规模调整\n在线升级\n多发布版本跟踪\n")])])]),t("ul",[t("li",[t("code",[e._v("Services")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("抽象一系列Pod并定义其访问规则\n固定IP地址和DNS域名\n通过环境变量和DNS发现服务\n负载均衡\n外部服务 – ClusterIP, NodePort, LoadBalancer\n")])])]),t("h4",{attrs:{id:"主要组成模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#主要组成模块"}},[e._v("#")]),e._v(" 主要组成模块")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("etcd")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("高可用的Key/Value存储\n只有apiserver有读写权限\n使用etcd集群确保数据可靠性\n")])])]),t("ul",[t("li",[t("code",[e._v("apiserver")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Kubernetes系统入口， REST\n认证\n授权\n访问控制\n服务帐号\n资源限制\n")])])]),t("ul",[t("li",[t("code",[e._v("kube-scheduler")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("资源需求\n服务需求\n硬件/软件/策略限制\n关联性和非关联性\n数据本地化\n")])])]),t("ul",[t("li",[t("code",[e._v("kube-controller-manager")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Replication controller\nEndpoint controller\nNamespace controller\nServiceaccount controller\n")])])]),t("ul",[t("li",[t("code",[e._v("kubelet")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("节点管理器\n确保调度到本节点的Pod的运行和健康\n")])])]),t("ul",[t("li",[t("code",[e._v("kube-proxy")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Pod网络代理\nTCP/UDP请求转发\n负载均衡（Round Robin）\n")])])]),t("ul",[t("li",[t("code",[e._v("服务发现")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("环境变量\nDNS – kube2sky， etcd，skydns\n")])])]),t("ul",[t("li",[t("code",[e._v("网络")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("容器间互相通信\n节点和容器间互相通信\n每个Pod使用一个全局唯一的IP\n")])])]),t("ul",[t("li",[t("code",[e._v("高可用")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("kubelet保证每一个master节点的服务正常运行\n系统监控程序确保kubelet正常运行\nEtcd集群\n多个apiserver进行负载均衡\nMaster选举确保kube-scheduler和kube-controller-manager高可用\n")])])]),t("h2",{attrs:{id:"资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#资料"}},[e._v("#")]),e._v(" 资料")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://juejin.im/entry/5a03f98d6fb9a04524054516",target:"_blank",rel:"noopener noreferrer"}},[e._v("如何更“优雅”地部署Kubernetes集群"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:""}})]),e._v(" "),t("li",[t("a",{attrs:{href:""}})]),e._v(" "),t("li",[t("a",{attrs:{href:""}})]),e._v(" "),t("li",[t("a",{attrs:{href:""}})]),e._v(" "),t("li",[t("a",{attrs:{href:""}})]),e._v(" "),t("li",[t("a",{attrs:{href:""}})])])])}),[],!1,null,null,null);t.default=a.exports}}]);
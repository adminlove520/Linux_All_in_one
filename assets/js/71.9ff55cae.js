(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{417:function(a,t,e){"use strict";e.r(t);var v=e(9),s=Object(v.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"常见日常监控"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见日常监控"}},[a._v("#")]),a._v(" 常见日常监控")]),a._v(" "),t("h2",{attrs:{id:"系统信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#系统信息"}},[a._v("#")]),a._v(" 系统信息")]),a._v(" "),t("ul",[t("li",[a._v("查看 CentOS 版本号："),t("code",[a._v("cat /etc/redhat-release")])])]),a._v(" "),t("hr"),a._v(" "),t("h2",{attrs:{id:"综合监控"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#综合监控"}},[a._v("#")]),a._v(" 综合监控")]),a._v(" "),t("ul",[t("li",[t("RouterLink",{attrs:{to:"/linux/ops/Nmon.html"}},[a._v("nmon")])],1)]),a._v(" "),t("hr"),a._v(" "),t("h2",{attrs:{id:"系统负载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#系统负载"}},[a._v("#")]),a._v(" 系统负载")]),a._v(" "),t("h4",{attrs:{id:"命令-w-判断整体瓶颈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命令-w-判断整体瓶颈"}},[a._v("#")]),a._v(" 命令：w（判断整体瓶颈）")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" 12:04:52 up 16 days, 12:54,  1 user,  load average: 0.06, 0.13, 0.12\nUSER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT\nroot     pts/0    116.21.24.85     11:57    4.00s 16:18   0.01s w\n")])])]),t("ul",[t("li",[a._v("第一行：\n"),t("ul",[t("li",[t("code",[a._v("12:04:52")]),a._v(" 表示当前系统时间")]),a._v(" "),t("li",[t("code",[a._v("up 16 days")]),a._v(" 表示系统运行时间")]),a._v(" "),t("li",[t("code",[a._v("1 user")]),a._v(" 表示登录用户数")]),a._v(" "),t("li",[t("code",[a._v("load average")]),a._v(" 表示平均负载，0.06 表示一分钟内系统的平均负载值，0.13 表示五分钟内系统的平均负载值，0.12 表示十五分钟内系统的平均负载值。一般这个字不要超过服务器的 CPU 线程数（process）就没有关系。\n"),t("ul",[t("li",[a._v("查看 CPU 总的线程数："),t("code",[a._v("grep 'processor' /proc/cpuinfo | sort -u | wc -l")])])])])])]),a._v(" "),t("li",[a._v("第二行：\n"),t("ul",[t("li",[a._v("开始表示各个登录用户的情况，当前登录者是 root，登录者 IP 116.21.24.85")])])]),a._v(" "),t("li",[a._v("还有一个简化版本的命令："),t("code",[a._v("uptime")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("10:56:16 up 26 days, 20:05,  1 user,  load average: 0.00, 0.01, 0.05\n")])])]),t("h4",{attrs:{id:"命令-vmstat-判断-ram-和-i-0-瓶颈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命令-vmstat-判断-ram-和-i-0-瓶颈"}},[a._v("#")]),a._v(" 命令：vmstat（判断 RAM 和 I/0 瓶颈）")]),a._v(" "),t("ul",[t("li",[a._v("命令："),t("code",[a._v("vmstat 5 10")]),a._v("，每 5 秒采样一次，共 10 次。")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----\n r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st\n 2  0      0  72648      0 674564    0    0     0     7    0   26  1  1 99  0  0\n 0  0      0  72648      0 674596    0    0     0     0  442  557  1  0 99  0  0\n 0  0      0  72648      0 674596    0    0     0    12  438  574  0  1 99  0  0\n 0  0      0  72648      0 674596    0    0     0     0  430  540  0  0 100  0  0\n 0  0      0  72648      0 674596    0    0     0     0  448  567  0  1 99  0  0\n 0  0      0  72648      0 674596    0    0     0     0  459  574  1  0 99  0  0\n 0  0      0  72648      0 674596    0    0     0     0  425  543  0  1 99  0  0\n 0  0      0  72276      0 674600    0    0     0     0  480  643  2  3 95  0  0\n")])])]),t("ul",[t("li",[a._v("第二行：\n"),t("ul",[t("li",[t("code",[a._v("r")]),a._v(" 表示运行和等待CPU时间片的进程数，该数字如果长期大于服务器CPU的进程数，则说明CPU不够用了。")]),a._v(" "),t("li",[t("code",[a._v("b")]),a._v(" 表示等待资源的进程数，比如等I/O，内存等。该数字如果长时间大于 1，则需要关注一下。")]),a._v(" "),t("li",[t("code",[a._v("si")]),a._v(" 表示由交换区写入到内存的数据量")]),a._v(" "),t("li",[t("code",[a._v("so")]),a._v(" 表示由内存写入到交换区的数据量")]),a._v(" "),t("li",[t("strong",[a._v("如果 si 和 so 的数字比较高，并且不断变化时，说明内存不够了。而且不断变化也表示对系统性能影响很大。")])]),a._v(" "),t("li",[t("code",[a._v("bi")]),a._v(" 表示从块设备读取数据的量（读磁盘）")]),a._v(" "),t("li",[t("code",[a._v("bo")]),a._v(" 表示从块设备写入数据的量（写磁盘）")]),a._v(" "),t("li",[t("strong",[a._v("如果bi和bo两个数字比较高，则说明，磁盘IO压力大。")])]),a._v(" "),t("li",[t("code",[a._v("in")]),a._v(" 每秒 CPU 的中断次数，包括时间中断")]),a._v(" "),t("li",[t("code",[a._v("cs")]),a._v(" 每秒上下文切换次数，例如我们调用系统函数，就要进行上下文切换，线程的切换，也要进程上下文切换，这个值要越小越好，太大了，要考虑调低线程或者进程的数目")]),a._v(" "),t("li",[t("code",[a._v("wa")]),a._v(" 表示I/O等待所占用CPU的时间比")])])])]),a._v(" "),t("h4",{attrs:{id:"命令-sar-综合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命令-sar-综合"}},[a._v("#")]),a._v(" 命令：sar（综合）")]),a._v(" "),t("ul",[t("li",[a._v("sar(system activity reporter 系统活动情况报告)")]),a._v(" "),t("li",[a._v("sar 是目前 linux 上最为全面的系统性能分析工具之一，可以从多方面对系统的活动情况进行报告。包括（文件的读写、系统调用、磁盘I/O、cpu效率、内存使用、进程活动以及IPC有关的活动）")]),a._v(" "),t("li",[a._v("如果没安装，运行："),t("code",[a._v("yum install -y sysstat")])])]),a._v(" "),t("h5",{attrs:{id:"sar-之-cpu-使用情况-判断-cpu-瓶颈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sar-之-cpu-使用情况-判断-cpu-瓶颈"}},[a._v("#")]),a._v(" sar 之 CPU 使用情况（判断 CPU 瓶颈）")]),a._v(" "),t("ul",[t("li",[a._v("命令："),t("code",[a._v("sar -u 5 10")]),a._v("，每 5 秒采样一次，共 10 次")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("01:57:29 PM     CPU     %user     %nice   %system   %iowait    %steal     %idle\n01:57:34 PM     all      1.81      0.00      0.40      0.00      0.00     97.78\n01:57:39 PM     all      0.20      0.00      0.40      0.00      0.00     99.39\n01:57:44 PM     all      0.40      0.00      0.60      0.00      0.00     98.99\n01:57:49 PM     all      0.20      0.00      0.40      0.00      0.00     99.39\n01:57:54 PM     all      0.80      0.00      1.41      0.00      0.00     97.79\n01:57:59 PM     all      0.40      0.00      0.60      0.00      0.00     98.99\n01:58:04 PM     all      0.20      0.00      0.40      0.00      0.00     99.39\n01:58:09 PM     all      0.20      0.00      0.40      0.00      0.00     99.39\n01:58:14 PM     all      0.40      0.00      0.61      0.00      0.00     98.99\n01:58:19 PM     all      0.20      0.00      0.61      0.00      0.00     99.19\nAverage:        all      0.48      0.00      0.59      0.00      0.00     98.93\n")])])]),t("ul",[t("li",[a._v("列说明：\n"),t("ul",[t("li",[t("code",[a._v("CPU：all")]),a._v(" 表示统计信息为所有 CPU的平均值。")]),a._v(" "),t("li",[t("code",[a._v("%user")]),a._v("：显示在用户级别(application)运行使用 CPU 总时间的百分比。")]),a._v(" "),t("li",[t("code",[a._v("%nice")]),a._v("：显示在用户级别，用于nice操作，所占用 CPU总时间的百分比。")]),a._v(" "),t("li",[t("code",[a._v("%system")]),a._v("：在核心级别(kernel)运行所使用 CPU总时间的百分比。")]),a._v(" "),t("li",[t("code",[a._v("%iowait")]),a._v("：显示用于等待I/O操作占用 CPU总时间的百分比。")]),a._v(" "),t("li",[t("code",[a._v("%steal")]),a._v("：管理程序(hypervisor)为另一个虚拟进程提供服务而等待虚拟 CPU 的百分比。")]),a._v(" "),t("li",[t("code",[a._v("%idle")]),a._v("：显示 CPU空闲时间占用 CPU总时间的百分比。")])])]),a._v(" "),t("li",[t("strong",[a._v("总结")]),a._v("：\n"),t("ul",[t("li",[a._v("1.若 "),t("code",[a._v("%iowait")]),a._v(" 的值过高，表示硬盘存在I/O瓶颈")]),a._v(" "),t("li",[a._v("2.若 "),t("code",[a._v("%idle")]),a._v(" 的值高但系统响应慢时，有可能是 CPU 等待分配内存，此时应加大内存容量，可以使用内存监控命令分析内存。")]),a._v(" "),t("li",[a._v("3.若 "),t("code",[a._v("%idle")]),a._v(" 的值持续低于1，则系统的 CPU 处理能力相对较低，表明系统中最需要解决的资源是 CPU。")])])])]),a._v(" "),t("h5",{attrs:{id:"sar-之-ram-使用情况-判断内存瓶颈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sar-之-ram-使用情况-判断内存瓶颈"}},[a._v("#")]),a._v(" sar 之 RAM 使用情况（判断内存瓶颈）")]),a._v(" "),t("ul",[t("li",[a._v("命令："),t("code",[a._v("sar -B 5 10")]),a._v("，每 5 秒采样一次，共 10 次")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("02:32:15 PM  pgpgin/s pgpgout/s   fault/s  majflt/s  pgfree/s pgscank/s pgscand/s pgsteal/s    %vmeff\n02:32:20 PM      0.00      0.81    258.47      0.00     27.22      0.00      0.00      0.00      0.00\n02:32:25 PM      0.00      0.00    611.54      0.00    300.20      0.00      0.00      0.00      0.00\n02:32:30 PM      0.00     26.61     10.08      0.00     11.90      0.00      0.00      0.00      0.00\n02:32:35 PM      0.00      1.62      3.64      0.00      3.84      0.00      0.00      0.00      0.00\n02:32:40 PM      0.00      0.00      3.42      0.00      4.43      0.00      0.00      0.00      0.00\n02:32:45 PM      0.00      0.00      3.43      0.00      3.83      0.00      0.00      0.00      0.00\n02:32:50 PM      0.00      1.62      3.84      0.00      5.86      0.00      0.00      0.00      0.00\n02:32:55 PM      0.00      0.00      3.41      0.00      3.82      0.00      0.00      0.00      0.00\n02:33:00 PM      0.00      2.42    763.84      0.00    208.69      0.00      0.00      0.00      0.00\n02:33:05 PM      0.00     13.74   2409.70      0.00    929.70      0.00      0.00      0.00      0.00\nAverage:         0.00      4.68    406.50      0.00    149.69      0.00      0.00      0.00      0.00\n")])])]),t("ul",[t("li",[t("code",[a._v("pgpgin/s")]),a._v("：表示每秒从磁盘或SWAP置换到内存的字节数(KB)")]),a._v(" "),t("li",[t("code",[a._v("pgpgout/s")]),a._v("：表示每秒从内存置换到磁盘或SWAP的字节数(KB)")]),a._v(" "),t("li",[t("code",[a._v("fault/s")]),a._v("：每秒钟系统产生的缺页数,即主缺页与次缺页之和(major + minor)")]),a._v(" "),t("li",[t("code",[a._v("majflt/s")]),a._v("：每秒钟产生的主缺页数")]),a._v(" "),t("li",[t("code",[a._v("pgfree/s")]),a._v("：每秒被放入空闲队列中的页个数")]),a._v(" "),t("li",[t("code",[a._v("pgscank/s")]),a._v("：每秒被kswapd扫描的页个数")]),a._v(" "),t("li",[t("code",[a._v("pgscand/s")]),a._v("：每秒直接被扫描的页个数")]),a._v(" "),t("li",[t("code",[a._v("pgsteal/s")]),a._v("：每秒钟从cache中被清除来满足内存需要的页个数")]),a._v(" "),t("li",[t("code",[a._v("%vmeff")]),a._v("：每秒清除的页(pgsteal)占总扫描页(pgscank+pgscand)的百分比")])]),a._v(" "),t("h5",{attrs:{id:"sar-之-i-o-使用情况-判断-i-o-瓶颈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sar-之-i-o-使用情况-判断-i-o-瓶颈"}},[a._v("#")]),a._v(" sar 之 I/O 使用情况（判断 I/O 瓶颈）")]),a._v(" "),t("ul",[t("li",[a._v("命令："),t("code",[a._v("sar -b 5 10")]),a._v("，每 5 秒采样一次，共 10 次")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("02:34:13 PM       tps      rtps      wtps   bread/s   bwrtn/s\n02:34:18 PM      3.03      0.00      3.03      0.00     59.80\n02:34:23 PM      0.00      0.00      0.00      0.00      0.00\n02:34:28 PM      0.00      0.00      0.00      0.00      0.00\n02:34:33 PM      0.00      0.00      0.00      0.00      0.00\n02:34:38 PM      1.61      0.00      1.61      0.00     24.80\n02:34:43 PM      0.00      0.00      0.00      0.00      0.00\n02:34:48 PM      0.40      0.00      0.40      0.00      4.86\n02:34:53 PM      0.00      0.00      0.00      0.00      0.00\n02:34:58 PM      0.00      0.00      0.00      0.00      0.00\n02:35:03 PM      0.00      0.00      0.00      0.00      0.00\nAverage:         0.50      0.00      0.50      0.00      8.94\n")])])]),t("ul",[t("li",[t("code",[a._v("tps")]),a._v("：每秒钟物理设备的 I/O 传输总量")]),a._v(" "),t("li",[t("code",[a._v("rtps")]),a._v("：每秒钟从物理设备读入的数据总量")]),a._v(" "),t("li",[t("code",[a._v("wtps")]),a._v("：每秒钟向物理设备写入的数据总量")]),a._v(" "),t("li",[t("code",[a._v("bread/s")]),a._v("：每秒钟从物理设备读入的数据量，单位为块/s")]),a._v(" "),t("li",[t("code",[a._v("bwrtn/s")]),a._v("：每秒钟向物理设备写入的数据量，单位为块/s")])]),a._v(" "),t("h5",{attrs:{id:"sar-之-dev-网卡-流量查看-判断网络瓶颈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sar-之-dev-网卡-流量查看-判断网络瓶颈"}},[a._v("#")]),a._v(" sar 之 DEV（网卡）流量查看（判断网络瓶颈）")]),a._v(" "),t("ul",[t("li",[a._v("命令："),t("code",[a._v("sar -n DEV")]),a._v("，查看网卡历史流量（因为是按时间显示每棵的流量，所以有很多）")]),a._v(" "),t("li",[a._v("如果要动态显示当前的网卡流量："),t("code",[a._v("sar -n DEV 1")])]),a._v(" "),t("li",[a._v("采样收集网卡流量："),t("code",[a._v("sar -n DEV 5 10")]),a._v("，每 5 秒采样一次，共 10 次")]),a._v(" "),t("li",[a._v("如果要查看其他日期下的记录，可以到这个目录下："),t("code",[a._v("cd /var/log/sa")]),a._v(" 查看下记录的文件，然后选择一个文件，比如："),t("code",[a._v("sar -n DEV -f /var/log/sa/sa01")]),a._v("）")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("01:46:24 PM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s\n01:46:25 PM        lo      3.00      3.00      0.18      0.18      0.00      0.00      0.00\n01:46:25 PM      eth0      4.00      4.00      0.55      0.56      0.00      0.00      0.00\n")])])]),t("ul",[t("li",[t("p",[t("code",[a._v("01:46:25 PM")]),a._v(" 表示时间")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("IFACE")]),a._v(" 表示网卡名称")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("rxpck/s")]),a._v(" 每秒钟接收到的 "),t("strong",[a._v("包数目")]),a._v("，一般如果这个数字大于 4000 一般是被攻击了。")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("txpck/s")]),a._v(" 每秒钟发送出去的 "),t("strong",[a._v("包数目")])])]),a._v(" "),t("li",[t("p",[t("code",[a._v("rxkB/s")]),a._v(" 每秒钟接收到的数据量(单位kb)，一般如果这个数字大于 5000 一般是被攻击了。")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("txkB/s")]),a._v(" 每秒钟发送出去的数据量(单位kb)")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("rxcmp/s")]),a._v("：每秒钟接收到的压缩包数目")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("txcmp/s")]),a._v("：每秒钟发送出去的压缩包数目")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("txmcst/s")]),a._v("：每秒钟接收到的多播包的包数目")])]),a._v(" "),t("li",[t("p",[a._v("查看 TCP 相关的一些数据（每隔 1 秒采样一次，一共 5 次）："),t("code",[a._v("sar -n TCP,ETCP 1 5")])])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Linux 3.10.0-693.2.2.el7.x86_64 (youmeek) \t07/17/2018 \t_x86_64_\t(2 CPU)\n\n12:05:47 PM  active/s passive/s    iseg/s    oseg/s\n12:05:48 PM      0.00      0.00      1.00      0.00\n\n12:05:47 PM  atmptf/s  estres/s retrans/s isegerr/s   orsts/s\n12:05:48 PM      0.00      0.00      0.00      0.00      0.00\n\n12:05:48 PM  active/s passive/s    iseg/s    oseg/s\n12:05:49 PM      0.00      0.00      1.00      1.00\n\n12:05:48 PM  atmptf/s  estres/s retrans/s isegerr/s   orsts/s\n12:05:49 PM      0.00      0.00      0.00      0.00      0.00\n\n12:05:49 PM  active/s passive/s    iseg/s    oseg/s\n12:05:50 PM      0.00      0.00      1.00      1.00\n\n12:05:49 PM  atmptf/s  estres/s retrans/s isegerr/s   orsts/s\n12:05:50 PM      0.00      0.00      0.00      0.00      0.00\n\n12:05:50 PM  active/s passive/s    iseg/s    oseg/s\n12:05:51 PM      0.00      0.00      3.00      3.00\n\n12:05:50 PM  atmptf/s  estres/s retrans/s isegerr/s   orsts/s\n12:05:51 PM      0.00      0.00      0.00      0.00      0.00\n\n12:05:51 PM  active/s passive/s    iseg/s    oseg/s\n12:05:52 PM      0.00      0.00      1.00      1.00\n\n12:05:51 PM  atmptf/s  estres/s retrans/s isegerr/s   orsts/s\n12:05:52 PM      0.00      0.00      0.00      0.00      0.00\n\nAverage:     active/s passive/s    iseg/s    oseg/s\nAverage:         0.00      0.00      1.40      1.20\n\nAverage:     atmptf/s  estres/s retrans/s isegerr/s   orsts/s\nAverage:         0.00      0.00      0.00      0.00      0.00\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("- active/s：每秒钟本地主动开启的 tcp 连接，也就是本地程序使用 connect() 系统调用\n- passive/s：每秒钟从源端发起的 tcp 连接，也就是本地程序使用 accept() 所接受的连接\n- retrans/s: 每秒钟的 tcp 重传次数\n\natctive 和 passive 的数目通常可以用来衡量服务器的负载：接受连接的个数（passive），下游连接的个数（active）。可以简单认为 active 为出主机的连接，passive 为入主机的连接；但这个不是很严格的说法，比如 loalhost 和 localhost 之间的连接。\n\n来自：https://zhuanlan.zhihu.com/p/39893236\n")])])]),t("hr"),a._v(" "),t("h2",{attrs:{id:"cpu-监控"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cpu-监控"}},[a._v("#")]),a._v(" CPU 监控")]),a._v(" "),t("h4",{attrs:{id:"cpu-的基本信息查看"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cpu-的基本信息查看"}},[a._v("#")]),a._v(" CPU 的基本信息查看")]),a._v(" "),t("ul",[t("li",[a._v("Demo CPU 型号："),t("a",{attrs:{href:"http://ark.intel.com/products/75789/Intel-Xeon-Processor-E5-2620-v2-15M-Cache-2_10-GHz",target:"_blank",rel:"noopener noreferrer"}},[a._v("Intel® Xeon® Processor E5-2620 v2(15M Cache, 2.10 GHz)"),t("OutboundLink")],1)]),a._v(" "),t("li",[a._v("该 CPU 显示的数据中有一项这个要注意："),t("code",[a._v("Intel® Hyper-Threading Technology")]),a._v(" 是 "),t("code",[a._v("Yes")]),a._v("。表示该 CPU 支持超线程")]),a._v(" "),t("li",[t("code",[a._v("cat /proc/cpuinfo")]),a._v("，查看 CPU 总体信息")]),a._v(" "),t("li",[t("code",[a._v("grep 'physical id' /proc/cpuinfo | sort -u | wc -l")]),a._v("，查看物理 CPU 个数\n"),t("ul",[t("li",[a._v("结果：2")]),a._v(" "),t("li",[a._v("物理 CPU：物理 CPU 也就是机器外面就能看到的一个个 CPU，每个物理 CPU 还带有单独的风扇")])])]),a._v(" "),t("li",[t("code",[a._v("grep 'core id' /proc/cpuinfo | sort -u | wc -l")]),a._v("，查看每个物理 CPU 的核心数量\n"),t("ul",[t("li",[a._v("结果：6，因为每个物理 CPU 是 6，所有 2 个物理 CPU 的总核心数量应该是：12")]),a._v(" "),t("li",[a._v("核心数：一个核心就是一个物理线程，英特尔有个超线程技术可以把一个物理线程模拟出两个线程来用，充分发挥 CPU 性能，意思是一个核心可以有多个线程。")])])]),a._v(" "),t("li",[t("code",[a._v("grep 'processor' /proc/cpuinfo | sort -u | wc -l")]),a._v("，查看 CPU 总的线程数，一般也叫做：逻辑 CPU 数量\n"),t("ul",[t("li",[a._v("结果：24，正常情况下：CPU 的总核心数量 == CPU 线程数，但是如果该 CPU 支持超线程，那结果是：CPU 的总核心数量 X 2 == CPU 线程数")]),a._v(" "),t("li",[a._v("线程数：线程数是一种逻辑的概念，简单地说，就是模拟出的 CPU 核心数。比如，可以通过一个 CPU 核心数模拟出 2 线程的 CPU，也就是说，这个单核心的 CPU 被模拟成了一个类似双核心 CPU 的功能。")])])])]),a._v(" "),t("h4",{attrs:{id:"cpu-监控-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cpu-监控-2"}},[a._v("#")]),a._v(" CPU 监控")]),a._v(" "),t("ul",[t("li",[a._v("Linux 的 CPU 简单监控一般简单")]),a._v(" "),t("li",[a._v("常用命令就是 "),t("code",[a._v("top")]),a._v(" "),t("ul",[t("li",[a._v("命令："),t("code",[a._v("top -bn1")]),a._v("，可以完全显示所有进程出来，但是不能实时展示数据，只能暂时命令当时的数据。")])])]),a._v(" "),t("li",[t("code",[a._v("top")]),a._v(" 可以动态显示进程所占的系统资源，每隔 3 秒变一次，占用系统资源最高的进程放最前面。")]),a._v(" "),t("li",[a._v("在 "),t("code",[a._v("top")]),a._v(" 命令状态下还可以按数字键 "),t("kbd",[a._v("1"),t("kbd",[a._v(" 显示各个 CPU 线程使用状态")])])]),a._v(" "),t("li",[a._v("在 "),t("code",[a._v("top")]),a._v(" 命令状态下按 "),t("kbd",[a._v("shfit")]),a._v(" + "),t("kbd",[a._v("m")]),a._v(" 可以按照 "),t("strong",[a._v("内存使用")]),a._v(" 大小排序")]),a._v(" "),t("li",[a._v("在 "),t("code",[a._v("top")]),a._v(" 命令状态下按 "),t("kbd",[a._v("shfit")]),a._v(" + "),t("kbd",[a._v("p")]),a._v(" 可以按照 "),t("strong",[a._v("CPU 使用")]),a._v(" 大小排序")]),a._v(" "),t("li",[a._v("展示数据上，%CPU 表示进程占用的 CPU 百分比，%MEM 表示进程占用的内存百分比")]),a._v(" "),t("li",[a._v("mac 下不一样：要先输入 o，然后输入 cpu 则按 cpu 使用量排序，输入 rsize 则按内存使用量排序。")])]),a._v(" "),t("h4",{attrs:{id:"cpu-其他工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cpu-其他工具"}},[a._v("#")]),a._v(" CPU 其他工具")]),a._v(" "),t("ul",[t("li",[a._v("htop 综合工具："),t("code",[a._v("yum install -y htop")]),a._v(" "),t("ul",[t("li",[a._v("这几篇文章讲得很好，我没必要再贴过来了，大家自己看：")]),a._v(" "),t("li",[t("a",{attrs:{href:"http://blog.51cto.com/215687833/1788493",target:"_blank",rel:"noopener noreferrer"}},[a._v("htop 命令完胜 top 命令"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://blog.csdn.net/freeking101/article/details/79173903",target:"_blank",rel:"noopener noreferrer"}},[a._v("htop 命令详解"),t("OutboundLink")],1)])])]),a._v(" "),t("li",[a._v("mpstat 实时监控 CPU 状态："),t("code",[a._v("yum install -y sysstat")]),a._v(" "),t("ul",[t("li",[a._v("可以具体到某个核心，比如我有 2 核的 CPU，因为 CPU 核心下标是从 0 开始，所以我要查看 0 的状况（间隔 3 秒获取一次指标，一共获取 5 次）："),t("code",[a._v("mpstat -P 0 3 5")])]),a._v(" "),t("li",[a._v("打印总 CPU 和各个核心指标："),t("code",[a._v("mpstat -P ALL 1")])]),a._v(" "),t("li",[a._v("获取所有核心的平均值："),t("code",[a._v("mpstat 3 5")])])])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Linux 3.10.0-693.2.2.el7.x86_64 (iZwz998aag1ggy168n3wg2Z) \t06/23/2018 \t_x86_64_\t(2 CPU)\n\n11:44:52 AM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle\n11:44:53 AM    0    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00\n11:44:54 AM    0    1.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00   99.00\n11:44:55 AM    0    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00\n11:44:56 AM    0    0.00    0.00    1.00    0.00    0.00    0.00    0.00    0.00    0.00   99.00\n11:44:57 AM    0    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00\nAverage:       0    0.20    0.00    0.20    0.00    0.00    0.00    0.00    0.00    0.00   99.60\n")])])]),t("ul",[t("li",[a._v("%usr 用户进程消耗 CPU 情况")]),a._v(" "),t("li",[a._v("%sys 系统进程消耗 CPU 情况")]),a._v(" "),t("li",[a._v("%iowait  表示 CPU 等待 IO 时间占整个 CPU 周期的百分比")]),a._v(" "),t("li",[a._v("%idle  显示 CPU 空闲时间占用 CPU 总时间的百分比")])]),a._v(" "),t("h4",{attrs:{id:"类似-top-的-pidstat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类似-top-的-pidstat"}},[a._v("#")]),a._v(" 类似 top 的 pidstat")]),a._v(" "),t("ul",[t("li",[a._v("安装："),t("code",[a._v("yum install -y sysstat")])]),a._v(" "),t("li",[a._v("每隔 2 秒采样一次，一共 5 次："),t("code",[a._v("pidstat 2 5")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Linux 3.10.0-693.el7.x86_64 (youmeek) \t07/17/2018 \t_x86_64_\t(8 CPU)\n\n11:52:58 AM   UID       PID    %usr %system  %guest    %CPU   CPU  Command\n11:53:00 AM     0     16813    0.50    0.99    0.00    1.49     1  pidstat\n11:53:00 AM     0     24757   50.99   12.87    0.00   63.86     0  java\n11:53:00 AM     0     24799   60.40    3.47    0.00   63.86     5  java\n11:53:00 AM     0     24841   99.50    7.43    0.00  100.00     0  java\n\n11:53:00 AM   UID       PID    %usr %system  %guest    %CPU   CPU  Command\n11:53:02 AM     0     24757   56.50    0.50    0.00   57.00     0  java\n11:53:02 AM     0     24799  100.00    6.50    0.00  100.00     5  java\n11:53:02 AM     0     24841   58.00    2.50    0.00   60.50     0  java\n\n11:53:02 AM   UID       PID    %usr %system  %guest    %CPU   CPU  Command\n11:53:04 AM     0     16813    0.00    1.00    0.00    1.00     2  pidstat\n11:53:04 AM     0     24757   62.00    5.50    0.00   67.50     0  java\n11:53:04 AM     0     24799   54.00   14.00    0.00   68.00     5  java\n11:53:04 AM     0     24841   39.50    9.00    0.00   48.50     0  java\n\n11:53:04 AM   UID       PID    %usr %system  %guest    %CPU   CPU  Command\n11:53:06 AM     0     16813    0.50    0.50    0.00    1.00     2  pidstat\n11:53:06 AM     0     24757   80.00   13.50    0.00   93.50     0  java\n11:53:06 AM     0     24799   56.50    0.50    0.00   57.00     5  java\n11:53:06 AM     0     24841    1.00    0.50    0.00    1.50     0  java\n\n11:53:06 AM   UID       PID    %usr %system  %guest    %CPU   CPU  Command\n11:53:08 AM     0     16813    0.00    0.50    0.00    0.50     2  pidstat\n11:53:08 AM     0     24757   58.50    1.00    0.00   59.50     0  java\n11:53:08 AM     0     24799   60.00    1.50    0.00   61.50     5  java\n11:53:08 AM     0     24841    1.00    0.50    0.00    1.50     0  java\n\nAverage:      UID       PID    %usr %system  %guest    %CPU   CPU  Command\nAverage:        0     16813    0.20    0.60    0.00    0.80     -  pidstat\nAverage:        0     24757   61.58    6.69    0.00   68.26     -  java\nAverage:        0     24799   66.47    5.19    0.00   71.66     -  java\nAverage:        0     24841   39.92    3.99    0.00   43.91     -  java\n")])])]),t("hr"),a._v(" "),t("h2",{attrs:{id:"内存监控"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存监控"}},[a._v("#")]),a._v(" 内存监控")]),a._v(" "),t("ul",[t("li",[a._v("Linux 的内存本质是虚拟内存，这样说是因为它的内存是：物理内存 + 交换分区。有一个内存模块来管理应用的内存使用。")]),a._v(" "),t("li",[a._v("如果所以你内存大，可以考虑把 swap 分区改得小点或者直接关掉。")]),a._v(" "),t("li",[a._v("但是，如果是用的云主机，一般是没交换分区的，"),t("code",[a._v("free -g")]),a._v(" 中的 Swap 都是 0。")]),a._v(" "),t("li",[a._v("查看内存使用命令：\n"),t("ul",[t("li",[a._v("以 M 为容量单位展示数据："),t("code",[a._v("free -m")])]),a._v(" "),t("li",[a._v("以 G 为容量单位展示数据："),t("code",[a._v("free -g")])]),a._v(" "),t("li",[a._v("CentOS 6 和 CentOS 7 展示出来的数据有差别，CentOS 7 比较容易看，比如下面的数据格式是 CentOS 7 的 "),t("code",[a._v("free -g")]),a._v("：")])])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("              total        used        free      shared  buff/cache   available\nMem:             11           0          10           0           0          10\nSwap:             5           0           5\n\n")])])]),t("ul",[t("li",[a._v("在以上结果中，其中可以用的内存是看 "),t("code",[a._v("available")]),a._v(" 列。")]),a._v(" "),t("li",[a._v("对于 CentOS 6 的系统可以使用下面命令：")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[root@bogon ~]# free -mlt\n             total       used       free     shared    buffers     cached\nMem:         16080      15919        160          0        278      11934\nLow:         16080      15919        160\nHigh:            0          0          0\n-/+ buffers/cache:       3706      12373\nSwap:            0          0          0\nTotal:       16080      15919        160\n")])])]),t("ul",[t("li",[a._v("以上的结果重点关注是："),t("code",[a._v("-/+ buffers/cache")]),a._v("，这一行代表实际使用情况。")])]),a._v(" "),t("h5",{attrs:{id:"pidstat-采样内存使用情况"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pidstat-采样内存使用情况"}},[a._v("#")]),a._v(" pidstat 采样内存使用情况")]),a._v(" "),t("ul",[t("li",[a._v("安装："),t("code",[a._v("yum install -y sysstat")])]),a._v(" "),t("li",[a._v("每隔 2 秒采样一次，一共 3 次："),t("code",[a._v("pidstat -r 2 3")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Linux 3.10.0-693.el7.x86_64 (youmeek) \t07/17/2018 \t_x86_64_\t(8 CPU)\n\n11:56:34 AM   UID       PID  minflt/s  majflt/s     VSZ    RSS   %MEM  Command\n11:56:36 AM     0     23960    168.81      0.00  108312   1124   0.01  pidstat\n11:56:36 AM     0     24757      8.42      0.00 9360696 3862788  23.75  java\n11:56:36 AM     0     24799      8.91      0.00 10424088 4988468  30.67  java\n11:56:36 AM     0     24841     11.39      0.00 10423576 4968428  30.54  java\n\n11:56:36 AM   UID       PID  minflt/s  majflt/s     VSZ    RSS   %MEM  Command\n11:56:38 AM     0     23960    169.50      0.00  108312   1200   0.01  pidstat\n11:56:38 AM     0     24757      6.00      0.00 9360696 3862788  23.75  java\n11:56:38 AM     0     24799      5.50      0.00 10424088 4988468  30.67  java\n11:56:38 AM     0     24841      7.00      0.00 10423576 4968428  30.54  java\n\n11:56:38 AM   UID       PID  minflt/s  majflt/s     VSZ    RSS   %MEM  Command\n11:56:40 AM     0     23960    160.00      0.00  108312   1200   0.01  pidstat\n11:56:40 AM     0     24757      6.50      0.00 9360696 3862788  23.75  java\n11:56:40 AM     0     24799      6.00      0.00 10424088 4988468  30.67  java\n11:56:40 AM     0     24841      8.00      0.00 10423576 4968428  30.54  java\n\nAverage:      UID       PID  minflt/s  majflt/s     VSZ    RSS   %MEM  Command\nAverage:        0     23960    166.11      0.00  108312   1175   0.01  pidstat\nAverage:        0     24757      6.98      0.00 9360696 3862788  23.75  java\nAverage:        0     24799      6.81      0.00 10424088 4988468  30.67  java\nAverage:        0     24841      8.80      0.00 10423576 4968428  30.54  java\n")])])]),t("hr"),a._v(" "),t("h2",{attrs:{id:"硬盘监控"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#硬盘监控"}},[a._v("#")]),a._v(" 硬盘监控")]),a._v(" "),t("h4",{attrs:{id:"硬盘容量相关查看"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#硬盘容量相关查看"}},[a._v("#")]),a._v(" 硬盘容量相关查看")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("df -h")]),a._v("：自动以合适的磁盘容量单位查看磁盘大小和使用空间")]),a._v(" "),t("li",[t("code",[a._v("df -m")]),a._v("：以磁盘容量单位 M 为数值结果查看磁盘使用情况")]),a._v(" "),t("li",[t("code",[a._v("du -sh /opt/tomcat6")]),a._v("：查看tomcat6这个文件夹大小 (h的意思human-readable用人类可读性较好方式显示，系统会自动调节单位，显示合适大小的单位)")]),a._v(" "),t("li",[t("code",[a._v("du /opt --max-depth=1 -h")]),a._v("：查看指定录入下包括子目录的各个文件大小情况")])]),a._v(" "),t("h4",{attrs:{id:"命令-iostat-判断-i-0-瓶颈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命令-iostat-判断-i-0-瓶颈"}},[a._v("#")]),a._v(" 命令：iostat（判断 I/0 瓶颈）")]),a._v(" "),t("ul",[t("li",[a._v("命令："),t("code",[a._v("iostat -x -k 3 3")]),a._v("，每 3 秒采样一次，共 3 次。")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("avg-cpu:  %user   %nice %system %iowait  %steal   %idle\n           0.55    0.00    0.52    0.00    0.00   98.93\n\nDevice:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util\nvda               0.00     0.04    0.02    0.62     0.44     6.49    21.65     0.00    1.42    1.17    1.42   0.25   0.02\n\navg-cpu:  %user   %nice %system %iowait  %steal   %idle\n           0.34    0.00    0.00    0.00    0.00   99.66\n\nDevice:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util\nvda               0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00    0.00    0.00   0.00   0.00\n\navg-cpu:  %user   %nice %system %iowait  %steal   %idle\n           2.02    0.00    0.34    0.00    0.00   97.64\n\nDevice:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util\nvda               0.00     0.00    0.00    1.68     0.00    16.16    19.20     0.00    0.20    0.00    0.20   0.20   0.03\n")])])]),t("ul",[t("li",[a._v("列说明：\n"),t("ul",[t("li",[t("code",[a._v("rrqm/s")]),a._v(": 每秒对该设备的读请求被合并次数，文件系统会对读取同块(block)的请求进行合并")]),a._v(" "),t("li",[t("code",[a._v("wrqm/s")]),a._v(": 每秒对该设备的写请求被合并次数")]),a._v(" "),t("li",[t("code",[a._v("r/s")]),a._v(": 每秒完成的读次数")]),a._v(" "),t("li",[t("code",[a._v("w/s")]),a._v(": 每秒完成的写次数")]),a._v(" "),t("li",[t("code",[a._v("rkB/s")]),a._v(": 每秒读数据量(kB为单位)")]),a._v(" "),t("li",[t("code",[a._v("wkB/s")]),a._v(": 每秒写数据量(kB为单位)")]),a._v(" "),t("li",[t("code",[a._v("avgrq-sz")]),a._v(":平均每次IO操作的数据量(扇区数为单位)")]),a._v(" "),t("li",[t("code",[a._v("avgqu-sz")]),a._v(": 平均等待处理的IO请求队列长度（队列长度大于 1 表示设备处于饱和状态。）")]),a._v(" "),t("li",[t("code",[a._v("await")]),a._v(": 系统发往 IO 设备的请求的平均响应时间(毫秒为单位)。这包括请求排队的时间，以及请求处理的时间。超过经验值的平均响应时间表明设备处于饱和状态，或者设备有问题。")]),a._v(" "),t("li",[t("code",[a._v("svctm")]),a._v(": 平均每次IO请求的处理时间(毫秒为单位)")]),a._v(" "),t("li",[t("code",[a._v("%util")]),a._v(": 采用周期内用于IO操作的时间比率，即IO队列非空的时间比率（就是繁忙程度，值越高表示越繁忙）")])])]),a._v(" "),t("li",[t("strong",[a._v("总结")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("iowait%")]),a._v(" 表示CPU等待IO时间占整个CPU周期的百分比，如果iowait值超过50%，或者明显大于%system、%user以及%idle，表示IO可能存在问题。")]),a._v(" "),t("li",[t("code",[a._v("%util")]),a._v(" （重点参数）表示磁盘忙碌情况，一般该值超过80%表示该磁盘可能处于繁忙状态")])])])]),a._v(" "),t("h4",{attrs:{id:"硬盘-io-监控"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#硬盘-io-监控"}},[a._v("#")]),a._v(" 硬盘 IO 监控")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("安装 iotop："),t("code",[a._v("yum install -y iotop")])])]),a._v(" "),t("li",[t("p",[a._v("查看所有进程 I/O 情况命令："),t("code",[a._v("iotop")])])]),a._v(" "),t("li",[t("p",[a._v("只查看当前正在处理 I/O 的进程："),t("code",[a._v("iotop -o")])])]),a._v(" "),t("li",[t("p",[a._v("只查看当前正在处理 I/O 的线程，每隔 5 秒刷新一次："),t("code",[a._v("iotop -o -d 5")])])]),a._v(" "),t("li",[t("p",[a._v("只查看当前正在处理 I/O 的进程（-P 参数决定），每隔 5 秒刷新一次："),t("code",[a._v("iotop -o -P -d 5")])])]),a._v(" "),t("li",[t("p",[a._v("只查看当前正在处理 I/O 的进程（-P 参数决定），每隔 5 秒刷新一次，使用 KB/s 单位（默认是 B/s）："),t("code",[a._v("iotop -o -P -k -d 5")])])]),a._v(" "),t("li",[t("p",[a._v("使用 dd 命令测量服务器延迟："),t("code",[a._v("dd if=/dev/zero of=/opt/ioTest2.txt bs=512 count=1000 oflag=dsync")])])]),a._v(" "),t("li",[t("p",[a._v("使用 dd 命令来测量服务器的吞吐率（写速度)："),t("code",[a._v("dd if=/dev/zero of=/opt/ioTest1.txt bs=1G count=1 oflag=dsync")])]),a._v(" "),t("ul",[t("li",[a._v("该命令创建了一个 10M 大小的文件 ioTest1.txt，其中参数解释：")]),a._v(" "),t("li",[a._v("if 代表输入文件。如果不指定 if，默认就会从 stdin 中读取输入。")]),a._v(" "),t("li",[a._v("of 代表输出文件。如果不指定 of，默认就会将 stdout 作为默认输出。")]),a._v(" "),t("li",[a._v("bs 代表字节为单位的块大小。")]),a._v(" "),t("li",[a._v("count 代表被复制的块数。")]),a._v(" "),t("li",[a._v("/dev/zero 是一个字符设备，会不断返回0值字节（\\0）。")]),a._v(" "),t("li",[a._v("oflag=dsync：使用同步I/O。不要省略这个选项。这个选项能够帮助你去除 caching 的影响，以便呈现给你精准的结果。")]),a._v(" "),t("li",[a._v("conv=fdatasyn: 这个选项和 oflag=dsync 含义一样。")])])]),a._v(" "),t("li",[t("p",[a._v("该命令执行完成后展示的数据：")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[root@youmeek ~]# dd if=/dev/zero of=/opt/ioTest1.txt bs=1G count=1 oflag=dsync\n记录了1+0 的读入\n记录了1+0 的写出\n1073741824字节(1.1 GB)已复制，5.43328 秒，198 MB/秒\n")])])]),t("ul",[t("li",[a._v("利用 hdparm 测试硬盘速度："),t("code",[a._v("yum install -y hdparm")])]),a._v(" "),t("li",[a._v("查看硬盘分区情况："),t("code",[a._v("df -h")]),a._v("，然后根据分区测试：")]),a._v(" "),t("li",[a._v("测试硬盘分区的读取速度："),t("code",[a._v("hdparm -T /dev/sda")])]),a._v(" "),t("li",[a._v("测试硬盘分区缓存的读取速度："),t("code",[a._v("hdparm -t /dev/sda")])]),a._v(" "),t("li",[a._v("也可以以上两个参数一起测试："),t("code",[a._v("hdparm -Tt /dev/sda")]),a._v("，结果数据如下：")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("/dev/sda:\nTiming cached reads:   3462 MB in  2.00 seconds = 1731.24 MB/sec\nTiming buffered disk reads: 806 MB in  3.00 seconds = 268.52 MB/sec\n")])])]),t("h5",{attrs:{id:"pidstat-采样硬盘使用情况"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pidstat-采样硬盘使用情况"}},[a._v("#")]),a._v(" pidstat 采样硬盘使用情况")]),a._v(" "),t("ul",[t("li",[a._v("安装："),t("code",[a._v("yum install -y sysstat")])]),a._v(" "),t("li",[a._v("每隔 2 秒采样一次，一共 3 次："),t("code",[a._v("pidstat -d 2 3")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Linux 3.10.0-693.el7.x86_64 (youmeek) \t07/17/2018 \t_x86_64_\t(8 CPU)\n\n11:57:29 AM   UID       PID   kB_rd/s   kB_wr/s kB_ccwr/s  Command\n\n11:57:31 AM   UID       PID   kB_rd/s   kB_wr/s kB_ccwr/s  Command\n11:57:33 AM     0     24757      0.00      2.00      0.00  java\n11:57:33 AM     0     24799      0.00     14.00      0.00  java\n\n11:57:33 AM   UID       PID   kB_rd/s   kB_wr/s kB_ccwr/s  Command\n11:57:35 AM     0     24841      0.00      8.00      0.00  java\n\nAverage:      UID       PID   kB_rd/s   kB_wr/s kB_ccwr/s  Command\nAverage:        0     24757      0.00      0.66      0.00  java\nAverage:        0     24799      0.00      4.65      0.00  java\nAverage:        0     24841      0.00      2.66      0.00  java\n")])])]),t("ul",[t("li",[a._v("输出指标含义：")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("kB_rd/s: 每秒进程从磁盘读取的数据量(以 kB 为单位)\nkB_wr/s: 每秒进程向磁盘写的数据量(以 kB 为单位)\nkB_ccwr/s：任务取消的写入磁盘的 KB。当任务截断脏的 pagecache 的时候会发生。\n")])])]),t("hr"),a._v(" "),t("h2",{attrs:{id:"网络监控"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网络监控"}},[a._v("#")]),a._v(" 网络监控")]),a._v(" "),t("h4",{attrs:{id:"网络监控常用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网络监控常用"}},[a._v("#")]),a._v(" 网络监控常用")]),a._v(" "),t("ul",[t("li",[a._v("安装 iftop（需要有 EPEL 源）："),t("code",[a._v("yum install -y iftop")]),a._v(" "),t("ul",[t("li",[a._v("如果没有 EPEL 源："),t("code",[a._v("yum install -y epel-release")])])])]),a._v(" "),t("li",[a._v("常用命令：\n"),t("ul",[t("li",[t("code",[a._v("iftop")]),a._v("：默认是监控第一块网卡的流量")]),a._v(" "),t("li",[t("code",[a._v("iftop -i eth0")]),a._v("：监控 eth0")]),a._v(" "),t("li",[t("code",[a._v("iftop -n")]),a._v("：直接显示IP, 不进行DNS反解析")]),a._v(" "),t("li",[t("code",[a._v("iftop -N")]),a._v("：直接显示连接埠编号, 不显示服务名称")]),a._v(" "),t("li",[t("code",[a._v("iftop -F 192.168.1.0/24 or 192.168.1.0/255.255.255.0")]),a._v("：显示某个网段进出封包流量")]),a._v(" "),t("li",[t("code",[a._v("iftop -nP")]),a._v("：显示端口与 IP 信息")])])])]),a._v(" "),t("div",{staticClass:"language-nginx extra-class"},[t("pre",{pre:!0,attrs:{class:"language-nginx"}},[t("code",[a._v("中间部分：外部连接列表，即记录了哪些ip正在和本机的网络连接\n\n右边部分：实时参数分别是该访问 ip 连接到本机 2 秒，10 秒和 40 秒的平均流量\n\n=> 代表发送数据，<= 代表接收数据\n\n底部会显示一些全局的统计数据，peek 是指峰值情况，cumm 是从 iftop 运行至今的累计情况，而 rates 表示最近 2 秒、10 秒、40 秒内总共接收或者发送的平均网络流量。\n\nTX:（发送流量）  cumm:   143MB   peak:   10.5Mb    rates:   1.03Mb  1.54Mb  2.10Mb\nRX:（接收流量）          12.7GB          228Mb              189Mb   191Mb   183Mb\nTOTAL:（总的流量）       12.9GB          229Mb              190Mb   193Mb   185MbW\n\n")])])]),t("h3",{attrs:{id:"端口使用情况-也可以用来查看端口占用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#端口使用情况-也可以用来查看端口占用"}},[a._v("#")]),a._v(" 端口使用情况（也可以用来查看端口占用）")]),a._v(" "),t("h4",{attrs:{id:"lsof"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lsof"}},[a._v("#")]),a._v(" lsof")]),a._v(" "),t("ul",[t("li",[a._v("安装 lsof："),t("code",[a._v("yum install -y lsof")])]),a._v(" "),t("li",[a._v("查看 3316 端口是否有被使用（macOS 也适用）："),t("code",[a._v("lsof -i:3316")]),a._v("，"),t("strong",[a._v("有被使用会输出类似如下信息，如果没被使用会没有任何信息返回")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("COMMAND     PID USER   FD   TYPE  DEVICE SIZE/OFF NODE NAME\njava      12011 root   77u  IPv6 4506842      0t0  TCP JDu4e00u53f7:58560->116.196.110.69:aicc-cmi (ESTABLISHED)\njava      12011 root   78u  IPv6 4506843      0t0  TCP JDu4e00u53f7:58576->116.196.110.69:aicc-cmi (ESTABLISHED)\njava      12011 root   79u  IPv6 4506844      0t0  TCP JDu4e00u53f7:58578->116.196.110.69:aicc-cmi (ESTABLISHED)\njava      12011 root   80u  IPv6 4506845      0t0  TCP JDu4e00u53f7:58574->116.196.110.69:aicc-cmi (ESTABLISHED)\njava      12011 root   82u  IPv6 4506846      0t0  TCP JDu4e00u53f7:58562->116.196.110.69:aicc-cmi (ESTABLISHED)\njava      12011 root   83u  IPv6 4506847      0t0  TCP JDu4e00u53f7:58564->116.196.110.69:aicc-cmi (ESTABLISHED)\njava      12011 root   84u  IPv6 4506848      0t0  TCP JDu4e00u53f7:58566->116.196.110.69:aicc-cmi (ESTABLISHED)\njava      12011 root   85u  IPv6 4506849      0t0  TCP JDu4e00u53f7:58568->116.196.110.69:aicc-cmi (ESTABLISHED)\njava      12011 root   86u  IPv6 4506850      0t0  TCP JDu4e00u53f7:58570->116.196.110.69:aicc-cmi (ESTABLISHED)\njava      12011 root   87u  IPv6 4506851      0t0  TCP JDu4e00u53f7:58572->116.196.110.69:aicc-cmi (ESTABLISHED)\ndocker-pr 13551 root    4u  IPv6 2116824      0t0  TCP *:aicc-cmi (LISTEN)\n")])])]),t("h4",{attrs:{id:"netstat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#netstat"}},[a._v("#")]),a._v(" netstat")]),a._v(" "),t("ul",[t("li",[a._v("更多用法可以看："),t("a",{attrs:{href:"https://linux.cn/article-2434-1.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("netstat 的10个基本用法"),t("OutboundLink")],1)]),a._v(" "),t("li",[a._v("查看所有在用的端口（macOS 也适用）："),t("code",[a._v("netstat -ntlp")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Active Internet connections (only servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    \ntcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      1/systemd           \ntcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      746/sshd            \ntcp        0      0 127.0.0.1:32000         0.0.0.0:*               LISTEN      12011/java          \ntcp6       0      0 :::9066                 :::*                    LISTEN      12011/java          \ntcp6       0      0 :::6379                 :::*                    LISTEN      28668/docker-proxy  \ntcp6       0      0 :::111                  :::*                    LISTEN      1/systemd           \ntcp6       0      0 :::3316                 :::*                    LISTEN      13551/docker-proxy  \ntcp6       0      0 :::22                   :::*                    LISTEN      746/sshd            \ntcp6       0      0 :::35224                :::*                    LISTEN      12011/java          \ntcp6       0      0 :::3326                 :::*                    LISTEN      14203/docker-proxy  \ntcp6       0      0 :::1984                 :::*                    LISTEN      12011/java          \ntcp6       0      0 :::8066                 :::*                    LISTEN      12011/java          \ntcp6       0      0 :::43107                :::*                    LISTEN      12011/java \n")])])]),t("ul",[t("li",[a._v("查看当前连接80端口的机子有多少，并且是属于什么状态："),t("code",[a._v("netstat -an|grep 80|sort -r")])]),a._v(" "),t("li",[a._v("查看已经连接的IP有多少连接数："),t("code",[a._v("netstat -ntu | awk '{print $5}' | cut -d: -f1 | sort | uniq -c | sort -n")])]),a._v(" "),t("li",[a._v("查看已经连接的IP有多少连接数，只显示前 5 个："),t("code",[a._v("netstat -ntu | awk '{print $5}' | cut -d: -f1 | sort | uniq -c | sort -n | head -5")])]),a._v(" "),t("li",[a._v("查看每个 ip 跟服务器建立的连接数："),t("code",[a._v("netstat -nat|awk '{print$5}'|awk -F : '{print$1}'|sort|uniq -c|sort -rn")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("262 127.0.0.1\n118\n103 172.22.100.141\n 12 172.22.100.29\n  7 172.22.100.183\n  6 116.21.17.144\n  6 0.0.0.0\n  5 192.168.1.109\n  4 172.22.100.32\n  4 172.22.100.121\n  4 172.22.100.108\n  4 172.18.1.39\n  3 172.22.100.2\n  3 172.22.100.190\n")])])]),t("ul",[t("li",[a._v("统计当前连接的一些状态情况："),t("code",[a._v("netstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}'")]),a._v(" 或者 "),t("code",[a._v("netstat -nat |awk '{print $6}'|sort|uniq -c|sort -rn")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("TIME_WAIT 96（是表示系统在等待客户端响应，以便再次连接时候能快速响应，如果积压很多，要开始注意了，准备阻塞了。这篇文章可以看下：http://blog.51cto.com/jschu/1728001）\nCLOSE_WAIT 11（如果积压很多，要开始注意了，准备阻塞了。可以看这篇文章：http://blog.51cto.com/net881004/2164020）\nFIN_WAIT2 17\nESTABLISHED 102（表示正常数据传输状态）\n")])])]),t("ul",[t("li",[a._v("TIME_WAIT 和 CLOSE_WAIT 说明：")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Linux 系统下，TCP连接断开后，会以TIME_WAIT状态保留一定的时间，然后才会释放端口。当并发请求过多的时候，就会产生大量的TIME_WAIT状态 的连接，无法及时断开的话，会占用大量的端口资源和服务器资源。这个时候我们可以优化TCP的内核参数，来及时将TIME_WAIT状态的端口清理掉。\n\n来源：http://zhangbin.junxilinux.com/?p=219\n\n=================================\n\n出现大量close_wait的现象，主要原因是某种情况下对方关闭了socket链接，但是另一端由于正在读写，没有关闭连接。代码需要判断socket，一旦读到0，断开连接，read返回负，检查一下errno，如果不是AGAIN，就断开连接。\nLinux分配给一个用户的文件句柄是有限的，而TIME_WAIT和CLOSE_WAIT两种状态如果一直被保持，那么意味着对应数目的通道就一直被占着，一旦达到句柄数上限，新的请求就无法被处理了，接着就是大量Too Many Open Files异常，导致tomcat崩溃。关于TIME_WAIT过多的解决方案参见TIME_WAIT数量太多。\n\n常见错误原因：\n1.代码层面上未对连接进行关闭，比如关闭代码未写在 finally 块关闭，如果程序中发生异常就会跳过关闭代码，自然未发出指令关闭，连接一直由程序托管，内核也无权处理，自然不会发出 FIN 请求，导致连接一直在 CLOSE_WAIT 。\n2.程序响应过慢，比如双方进行通讯，当客户端请求服务端迟迟得不到响应，就断开连接，重新发起请求，导致服务端一直忙于业务处理，没空去关闭连接。这种情况也会导致这个问题。一般如果有多个节点，nginx 进行负载，其中某个节点很高，其他节点不高，那可能就是负载算法不正常，都落在一台机子上了，以至于它忙不过来。\n\n来源：https://juejin.im/post/5b59e61ae51d4519634fe257\n")])])]),t("ul",[t("li",[a._v("查看网络接口接受、发送的数据包情况（每隔 3 秒统计一次）："),t("code",[a._v("netstat -i 3")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Kernel Interface table\nIface      MTU    RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg\neth0      1500 10903298      0      0 0      10847741      0      0      0 BMRU\nlo       65536   453650      0      0 0        453650      0      0      0 LRU\neth0      1500 10903335      0      0 0      10847777      0      0      0 BMRU\nlo       65536   453650      0      0 0        453650      0      0      0 LRU\neth0      1500 10903363      0      0 0      10847798      0      0      0 BMRU\nlo       65536   453650      0      0 0        453650      0      0      0 LRU\neth0      1500 10903393      0      0 0      10847836      0      0      0 BMRU\nlo       65536   453650      0      0 0        453650      0      0      0 LRU\neth0      1500 10903437      0      0 0      10847867      0      0      0 BMRU\nlo       65536   453650      0      0 0        453650      0      0      0 LRU\n")])])]),t("ul",[t("li",[a._v("接收（该值是历史累加数据，不是瞬间数据，要计算时间内的差值需要自己减）：\n"),t("ul",[t("li",[a._v("RX-OK 已接收字节数")]),a._v(" "),t("li",[a._v("RX-ERR 已接收错误字节数（数据值大说明网络存在问题）")]),a._v(" "),t("li",[a._v("RX-DRP 已丢失字节数（数据值大说明网络存在问题）")]),a._v(" "),t("li",[a._v("RX-OVR 由于误差而遗失字节数（数据值大说明网络存在问题）")])])]),a._v(" "),t("li",[a._v("发送（该值是历史累加数据，不是瞬间数据，要计算时间内的差值需要自己减）：\n"),t("ul",[t("li",[a._v("TX-OK 已发送字节数")]),a._v(" "),t("li",[a._v("TX-ERR 已发送错误字节数（数据值大说明网络存在问题）")]),a._v(" "),t("li",[a._v("TX-DRP 已丢失字节数（数据值大说明网络存在问题）")]),a._v(" "),t("li",[a._v("TX-OVR 由于误差而遗失字节数（数据值大说明网络存在问题）")])])])]),a._v(" "),t("h4",{attrs:{id:"网络排查"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网络排查"}},[a._v("#")]),a._v(" 网络排查")]),a._v(" "),t("ul",[t("li",[a._v("ping 命令查看丢包、域名解析地址\n"),t("ul",[t("li",[t("code",[a._v("ping 116.196.110.69")])]),a._v(" "),t("li",[t("code",[a._v("ping www.GitNavi.com")])])])]),a._v(" "),t("li",[a._v("telnet 测试端口的连通性（验证服务的可用性）\n"),t("ul",[t("li",[t("code",[a._v("yum install -y telnet")])]),a._v(" "),t("li",[t("code",[a._v("telnet 116.196.110.68 3306")])]),a._v(" "),t("li",[t("code",[a._v("telnet www.youmeek.com 80")])])])]),a._v(" "),t("li",[a._v("tracert（跟踪路由）查看网络请求节点访问情况，用于确定 IP 数据报访问目标所采取的路径。\n"),t("ul",[t("li",[t("code",[a._v("yum install -y traceroute")])]),a._v(" "),t("li",[t("code",[a._v("traceroute gitnavi.com")])])])]),a._v(" "),t("li",[a._v("nslookup 命令查看 DNS 是否可用\n"),t("ul",[t("li",[t("code",[a._v("yum install -y bind-utils")])]),a._v(" "),t("li",[a._v("输入："),t("code",[a._v("nslookup")]),a._v("，然后终端进入交互模式，然后输入："),t("code",[a._v("www.baidu.com")]),a._v("，此时会展示类似这样的信息：")])])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Server:\t\t103.224.222.221（这个是你本机的信息）\nAddress:\t103.224.222.221#53（这个是你本机的信息）\n\n（下面是百度的信息）\nNon-authoritative answer:\nwww.baidu.COM\tcanonical name = www.a.shifen.COM.\nName:\twww.a.shifen.COM\nAddress: 220.181.112.244\nName:\twww.a.shifen.COM\nAddress: 220.181.111.188\n")])])]),t("ul",[t("li",[a._v("此时我们假设换个 DNS，我们在刚刚的交互阶段继续输入："),t("code",[a._v("server 8.8.8.8")]),a._v("，表示我们此时用 8.8.8.8 的 DNS，然后我们在交互中再输入："),t("code",[a._v("www.baidu.com")]),a._v("，此时会出现这个信息：")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Server:\t\t8.8.8.8\nAddress:\t8.8.8.8#53\n\nNon-authoritative answer:\nwww.baidu.com\tcanonical name = www.a.shifen.com.\nName:\twww.a.shifen.com\nAddress: 180.97.33.108\nName:\twww.a.shifen.com\nAddress: 180.97.33.107\n")])])]),t("ul",[t("li",[a._v("以上表明，不同的 DNS 情况下，我们获取到的域名所属 IP 是不同的。")])]),a._v(" "),t("hr"),a._v(" "),t("h2",{attrs:{id:"查看-linux-内核版本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看-linux-内核版本"}},[a._v("#")]),a._v(" 查看 Linux 内核版本")]),a._v(" "),t("ul",[t("li",[a._v("对于一些复杂的层面问题，一般都要先确认内核版本，好帮助分析："),t("code",[a._v("uname -r")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("3.10.0-693.2.2.el7.x86_64\n")])])]),t("h2",{attrs:{id:"dmesg-打印内核信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dmesg-打印内核信息"}},[a._v("#")]),a._v(" dmesg 打印内核信息")]),a._v(" "),t("ul",[t("li",[a._v("开机信息存在："),t("code",[a._v("tail -500f /var/log/dmesg")])]),a._v(" "),t("li",[a._v("查看尾部信息："),t("code",[a._v("dmesg -T | tail")]),a._v(" "),t("ul",[t("li",[a._v("参数 "),t("code",[a._v("-T")]),a._v(" 表示显示时间")])])]),a._v(" "),t("li",[a._v("只显示 error 和 warning 信息："),t("code",[a._v("dmesg --level=err,warn -T")])]),a._v(" "),t("li",[a._v("有些 OOM 的错误会在这里显示，比如：")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[1880957.563400] Out of memory: Kill process 18694 (perl) score 246 or sacrifice child\n[1880957.563408] Killed process 18694 (perl) total-vm:1972392kB, anon-rss:1953348kB, file-rss:0kB\n")])])]),t("h2",{attrs:{id:"查看系统日志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看系统日志"}},[a._v("#")]),a._v(" 查看系统日志")]),a._v(" "),t("ul",[t("li",[a._v("查看系统日志："),t("code",[a._v("tail -400f /var/log/messages")])]),a._v(" "),t("li",[a._v("可能会看到类似以下异常：")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Out of memory: Kill process 19452 (java) score 264 or sacrifice child\n")])])]),t("hr"),a._v(" "),t("h2",{attrs:{id:"服务器故障排查顺序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#服务器故障排查顺序"}},[a._v("#")]),a._v(" 服务器故障排查顺序")]),a._v(" "),t("h4",{attrs:{id:"请求时好时坏"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#请求时好时坏"}},[a._v("#")]),a._v(" 请求时好时坏")]),a._v(" "),t("ul",[t("li",[a._v("系统层面\n"),t("ul",[t("li",[a._v("查看负载、CPU、内存、上线时间、高资源进程 PID："),t("code",[a._v("htop")])]),a._v(" "),t("li",[a._v("查看网络丢失情况："),t("code",[a._v("netstat -i 3")]),a._v("，关注：RX-DRP、TX-DRP，如果两个任何一个有值，或者都有值，肯定是网络出了问题（该值是历史累加数据，不是瞬间数据）。")])])]),a._v(" "),t("li",[a._v("应用层面\n"),t("ul",[t("li",[a._v("临时修改 nginx log 输出格式，输出完整信息，包括请求头")])])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('$request_body   请求体（含POST数据）\n$http_XXX       指定某个请求头（XXX为字段名，全小写）\n$cookie_XXX     指定某个cookie值（XXX为字段名，全小写）\n\n\n类似用法：\nlog_format  special_main  \'$remote_addr - $remote_user [$time_local] "$request" \'\n    \'$status $body_bytes_sent "$request_body" "$http_referer" \'\n    \'"$http_user_agent" $http_x_forwarded_for "appid=$http_appid,appver=$http_appver,vuser=$http_vuser" \'\n    \'"phpsessid=$cookie_phpsessid,vuser_cookie=$cookie___vuser" \';\n\n\naccess_log  /home/wwwlogs/hicrew.log special_main;\n\n')])])]),t("h4",{attrs:{id:"cpu-高-负载高-访问慢-没有数据库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cpu-高-负载高-访问慢-没有数据库"}},[a._v("#")]),a._v(" CPU 高，负载高，访问慢（没有数据库）")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("记录负载开始升高的时间")])]),a._v(" "),t("li",[a._v("常见场景\n"),t("ul",[t("li",[a._v("虚拟机所在的宿主机资源瓶颈，多个虚拟机竞争资源")]),a._v(" "),t("li",[a._v("定时任务大量的任务并发")]),a._v(" "),t("li",[a._v("消息、请求堆积后恢复时的瞬时流量引起")]),a._v(" "),t("li",[a._v("持久化任务引起")]),a._v(" "),t("li",[a._v("更多可以看这篇："),t("a",{attrs:{href:"https://blog.csdn.net/freeiceflame/article/details/78006812",target:"_blank",rel:"noopener noreferrer"}},[a._v("线上异常排查总结"),t("OutboundLink")],1)])])]),a._v(" "),t("li",[a._v("系统层面\n"),t("ul",[t("li",[a._v("查看负载、CPU、内存、上线时间、高资源进程 PID："),t("code",[a._v("htop")])]),a._v(" "),t("li",[a._v("查看磁盘使用情况："),t("code",[a._v("df -h")])]),a._v(" "),t("li",[a._v("查看磁盘当前情况："),t("code",[a._v("iostat -x -k 3 3")]),a._v("。如果发现当前磁盘忙碌，则查看是哪个 PID 在忙碌："),t("code",[a._v("iotop -o -P -k -d 5")])]),a._v(" "),t("li",[a._v("查看 PID 具体在写什么东西："),t("code",[a._v("lsof -p PID")])]),a._v(" "),t("li",[a._v("查看系统日志："),t("code",[a._v("tail -400f /var/log/messages")])]),a._v(" "),t("li",[a._v("查看简化线程树："),t("code",[a._v("pstree -a >> /opt/pstree-20180915.log")])]),a._v(" "),t("li",[a._v("其他机子 ping（多个地区 ping），看下解析 IP 与网络丢包")]),a._v(" "),t("li",[a._v("查看网络节点情况："),t("code",[a._v("traceroute www.youmeek.com")])]),a._v(" "),t("li",[t("code",[a._v("ifconfig")]),a._v(" 查看 dropped 和 error 是否在不断增加，判断网卡是否出现问题")]),a._v(" "),t("li",[t("code",[a._v("nslookup")]),a._v(" 命令查看 DNS 是否可用")]),a._v(" "),t("li",[a._v("如果 nginx 有安装：http_stub_status_module 模块，则查看当前统计")]),a._v(" "),t("li",[a._v("查看 TCP 和 UDP 应用\n"),t("ul",[t("li",[t("code",[a._v("netstat -ntlp")])]),a._v(" "),t("li",[t("code",[a._v("netstat -nulp")])])])]),a._v(" "),t("li",[a._v("统计当前连接的一些状态情况："),t("code",[a._v("netstat -nat |awk '{print $6}'|sort|uniq -c|sort -rn")])]),a._v(" "),t("li",[a._v("查看每个 ip 跟服务器建立的连接数："),t("code",[a._v("netstat -nat|awk '{print$5}'|awk -F : '{print$1}'|sort|uniq -c|sort -rn")])]),a._v(" "),t("li",[a._v("查看与后端应用端口连接的有多少："),t("code",[a._v("lsof -i:8080|grep 'TCP'|wc -l")])]),a._v(" "),t("li",[a._v("跟踪程序（按 "),t("code",[a._v("Ctrl + C")]),a._v(" 停止跟踪）："),t("code",[a._v("strace -tt -T -v -f -e trace=file -o /opt/strace-20180915.log -s 1024 -p PID")])]),a._v(" "),t("li",[a._v("看下谁在线："),t("code",[a._v("w")]),a._v("，"),t("code",[a._v("last")])]),a._v(" "),t("li",[a._v("看下执行了哪些命令："),t("code",[a._v("history")])])])]),a._v(" "),t("li",[a._v("程序、JVM 层面\n"),t("ul",[t("li",[a._v("保存、查看 Nginx 程序 log\n"),t("ul",[t("li",[a._v("通过 GoAccess 分析 log")])])]),a._v(" "),t("li",[a._v("保存、查看 Java 程序 log")]),a._v(" "),t("li",[a._v("使用内置 tomcat-manager 监控配置，或者使用类似工具：psi-probe")]),a._v(" "),t("li",[a._v("使用 "),t("code",[a._v("ps -ef | grep java")]),a._v("，查看进程 PID\n"),t("ul",[t("li",[a._v("根据高 CPU 的进程 PID，查看其线程 CPU 使用情况："),t("code",[a._v("top -Hp PID")]),a._v("，找到占用 CPU 资源高的线程 PID")])])]),a._v(" "),t("li",[a._v("保存堆栈情况："),t("code",[a._v("jstack -l PID >> /opt/jstack-tomcat1-PID-20180917.log")]),a._v(" "),t("ul",[t("li",[a._v("把占用 CPU 资源高的线程十进制的 PID 转换成 16 进制："),t("code",[a._v('printf "%x\\n" PID')]),a._v("，比如："),t("code",[a._v('printf "%x\\n" 12401')]),a._v(" 得到结果是："),t("code",[a._v("3071")])]),a._v(" "),t("li",[a._v("在刚刚输出的那个 log 文件中搜索："),t("code",[a._v("3071")]),a._v("，可以找到："),t("code",[a._v("nid=0x3071")])])])]),a._v(" "),t("li",[a._v("使用 "),t("code",[a._v("jstat -gc PID 10000 10")]),a._v("，查看gc情况（截图）")]),a._v(" "),t("li",[a._v("使用 "),t("code",[a._v("jstat -gccause PID")]),a._v("：额外输出上次GC原因（截图）")]),a._v(" "),t("li",[a._v("使用 "),t("code",[a._v("jstat -gccause PID 10000 10")]),a._v("：额外输出上次GC原因，收集 10 次，每隔 10 秒")]),a._v(" "),t("li",[a._v("使用 "),t("code",[a._v("jmap -dump:format=b,file=/opt/dumpfile-tomcat1-PID-20180917.hprof PID")]),a._v("，生成堆转储文件\n"),t("ul",[t("li",[a._v("使用 jhat 或者可视化工具（Eclipse Memory Analyzer 、IBM HeapAnalyzer）分析堆情况。")])])]),a._v(" "),t("li",[a._v("结合代码解决内存溢出或泄露问题。")]),a._v(" "),t("li",[a._v("给 VM 增加 dump 触发参数："),t("code",[a._v("-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/opt/tomcat-1.hprof")])])])])]),a._v(" "),t("h4",{attrs:{id:"一次-jvm-引起的-cpu-高排查"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一次-jvm-引起的-cpu-高排查"}},[a._v("#")]),a._v(" 一次 JVM 引起的 CPU 高排查")]),a._v(" "),t("ul",[t("li",[a._v("使用 "),t("code",[a._v("ps -ef | grep java")]),a._v("，查看进程 PID\n"),t("ul",[t("li",[a._v("根据高 CPU 的进程 PID，查看其线程 CPU 使用情况："),t("code",[a._v("top -Hp PID")]),a._v("，找到占用 CPU 资源高的线程 TID")]),a._v(" "),t("li",[a._v("也可以用："),t("code",[a._v("ps -mp PID -o THREAD,tid,time")])])])]),a._v(" "),t("li",[a._v("保存堆栈情况："),t("code",[a._v("jstack -l TID >> /opt/jstack-tomcat1-TID-20181017.log")])]),a._v(" "),t("li",[a._v("把占用 CPU 资源高的线程十进制的 TID 转换成 16 进制："),t("code",[a._v('printf "%x\\n" TID')]),a._v("，比如："),t("code",[a._v('printf "%x\\n" 12401')]),a._v(" 得到结果是："),t("code",[a._v("3071")])]),a._v(" "),t("li",[a._v("在刚刚输出的那个 log 文件中搜索："),t("code",[a._v("3071")]),a._v("，可以找到："),t("code",[a._v("nid=0x3071")])]),a._v(" "),t("li",[a._v("也可以在终端中直接看："),t("code",[a._v("jstack TID |grep 十六进制线程 -A 30")]),a._v("，此时如果发现如下：")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('"GC task thread#0 (ParallelGC)" os_prio=0 tid=0x00007fd0ac01f000 nid=0x66f runnable \n')])])]),t("ul",[t("li",[a._v("这种情况一般是 heap 设置得过小，而又要频繁分配对象；二是内存泄露，对象一直不能被回收，导致 CPU 占用过高")]),a._v(" "),t("li",[a._v("使用："),t("code",[a._v("jstat -gcutil PID 3000 10")]),a._v("：")]),a._v(" "),t("li",[a._v("正常情况结果应该是这样的：")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT\n0.00   0.00  67.63  38.09  78.03  68.82    124    0.966     5    0.778    1.744\n0.00   0.00  67.68  38.09  78.03  68.82    124    0.966     5    0.778    1.744\n0.00   0.00  67.68  38.09  78.03  68.82    124    0.966     5    0.778    1.744\n0.00   0.00  67.68  38.09  78.03  68.82    124    0.966     5    0.778    1.744\n0.00   0.00  67.68  38.09  78.03  68.82    124    0.966     5    0.778    1.744\n0.00   0.00  67.68  38.09  78.03  68.82    124    0.966     5    0.778    1.744\n0.00   0.00  67.68  38.09  78.03  68.82    124    0.966     5    0.778    1.744\n0.00   0.00  67.68  38.09  78.03  68.82    124    0.966     5    0.778    1.744\n0.00   0.00  67.71  38.09  78.03  68.82    124    0.966     5    0.778    1.744\n0.00   0.00  67.71  38.09  78.03  68.82    124    0.966     5    0.778    1.744\n\n")])])]),t("ul",[t("li",[a._v("S0：SO 当前使用比例")]),a._v(" "),t("li",[a._v("S1：S1 当前使用比例")]),a._v(" "),t("li",[a._v("E："),t("strong",[a._v("Eden 区使用比例（百分比）（异常的时候，这里可能会接近 100%）")])]),a._v(" "),t("li",[a._v("O："),t("strong",[a._v("old 区使用比例（百分比）（异常的时候，这里可能会接近 100%）")])]),a._v(" "),t("li",[a._v("M："),t("strong",[a._v("Metaspace 区使用比例（百分比）（异常的时候，这里可能会接近 100%）")])]),a._v(" "),t("li",[a._v("CCS：压缩使用比例")]),a._v(" "),t("li",[a._v("YGC：年轻代垃圾回收次数")]),a._v(" "),t("li",[a._v("FGC：老年代垃圾回收次数")]),a._v(" "),t("li",[a._v("FGCT：老年代垃圾回收消耗时间（单位秒）")]),a._v(" "),t("li",[a._v("GCT：垃圾回收消耗总时间（单位秒）")]),a._v(" "),t("li",[t("strong",[a._v("异常的时候每次 Full GC 时间也可能非常长，每次时间计算公式=FGCT值/FGC指）")])]),a._v(" "),t("li",[t("code",[a._v("jmap -heap PID")]),a._v("，查看具体占用量是多大")]),a._v(" "),t("li",[a._v("使用 "),t("code",[a._v("jmap -dump:format=b,file=/opt/dumpfile-tomcat1-PID-20180917.hprof PID")]),a._v("，生成堆转储文件（如果设置的 heap 过大，dump 下来会也会非常大）\n"),t("ul",[t("li",[a._v("使用 jhat 或者可视化工具（Eclipse Memory Analyzer 、IBM HeapAnalyzer）分析堆情况。")]),a._v(" "),t("li",[a._v("一般这时候就只能根据 jhat 的分析，看源码了")])])]),a._v(" "),t("li",[a._v("这里有几篇类似经历的文章推荐给大家：\n"),t("ul",[t("li",[t("a",{attrs:{href:"http://luofei.me/?p=197",target:"_blank",rel:"noopener noreferrer"}},[a._v("三个神奇bug之Java占满CPU"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"http://zhouyun.me/2017/10/24/cpu_load_issue/",target:"_blank",rel:"noopener noreferrer"}},[a._v("CPU 负载过高问题排查"),t("OutboundLink")],1)])])])]),a._v(" "),t("h4",{attrs:{id:"cpu-低-负载高-访问慢-带数据库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cpu-低-负载高-访问慢-带数据库"}},[a._v("#")]),a._v(" CPU 低，负载高，访问慢（带数据库）")]),a._v(" "),t("ul",[t("li",[a._v("基于上面，但是侧重点在于 I/O 读写，以及是否有 MySQL 死锁，或者挂载了 NFS，而 NFS Server 出现问题")]),a._v(" "),t("li",[a._v("mysql 下查看当前的连接数与执行的sql 语句："),t("code",[a._v("show full processlist;")])]),a._v(" "),t("li",[a._v("检查慢查询日志，可能是慢查询引起负载高，根据配置文件查看存放位置："),t("code",[a._v("log_slow_queries")])]),a._v(" "),t("li",[a._v("查看 MySQL 设置的最大连接数："),t("code",[a._v("show variables like 'max_connections';")]),a._v(" "),t("ul",[t("li",[a._v("重新设置最大连接数："),t("code",[a._v("set GLOBAL max_connections=300")])])])])]),a._v(" "),t("h2",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[a._v("#")]),a._v(" 参考资料")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"http://man.linuxde.net/dd",target:"_blank",rel:"noopener noreferrer"}},[a._v("http://man.linuxde.net/dd"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://linux.cn/article-6104-1.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://linux.cn/article-6104-1.html"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"http://www.cnblogs.com/ggjucheng/archive/2013/01/13/2858923.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("http://www.cnblogs.com/ggjucheng/archive/2013/01/13/2858923.html"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"http://coolnull.com/3649.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("http://coolnull.com/3649.html"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"http://www.rfyy.net/archives/2456.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("http://www.rfyy.net/archives/2456.html"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"http://programmerfamily.com/blog/linux/sav.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("http://programmerfamily.com/blog/linux/sav.html"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://www.jianshu.com/p/3991c0dba094",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://www.jianshu.com/p/3991c0dba094"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://www.jianshu.com/p/3667157d63bb",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://www.jianshu.com/p/3667157d63bb"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://www.cnblogs.com/yjd_hycf_space/p/7755633.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://www.cnblogs.com/yjd_hycf_space/p/7755633.html"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"http://silverd.cn/2016/05/27/nginx-access-log.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("http://silverd.cn/2016/05/27/nginx-access-log.html"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=s.exports}}]);
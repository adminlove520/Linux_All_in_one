(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{345:function(e,s,t){e.exports=t.p+"assets/img/Redis-GUI-a-1.9772c9a4.jpg"},430:function(e,s,t){"use strict";t.r(s);var r=t(9),n=Object(r.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"redis-安装和配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-安装和配置"}},[e._v("#")]),e._v(" Redis 安装和配置")]),e._v(" "),s("h2",{attrs:{id:"如果你用-spring-data-redis-依赖请注意"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如果你用-spring-data-redis-依赖请注意"}},[e._v("#")]),e._v(" 如果你用 Spring Data Redis 依赖请注意")]),e._v(" "),s("ul",[s("li",[e._v("请先看官网最新支持到哪个版本的依赖："),s("a",{attrs:{href:"https://docs.spring.io/spring-data/data-redis/docs/current/reference/html/#new-features",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://docs.spring.io/spring-data/data-redis/docs/current/reference/html/#new-features"),s("OutboundLink")],1),e._v(" "),s("ul",[s("li",[e._v("查看锚点为："),s("code",[e._v("New in Spring Data Redis")]),e._v(" 的内容")])])]),e._v(" "),s("li",[e._v("目前 201712 支持 Redis 3.2")])]),e._v(" "),s("h2",{attrs:{id:"如果你用-redisdesktopmanager-客户端请注意"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如果你用-redisdesktopmanager-客户端请注意"}},[e._v("#")]),e._v(" 如果你用 RedisDesktopManager 客户端请注意")]),e._v(" "),s("ul",[s("li",[e._v("请查看介绍中支持哪个版本："),s("a",{attrs:{href:"https://github.com/uglide/RedisDesktopManager",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/uglide/RedisDesktopManager"),s("OutboundLink")],1)]),e._v(" "),s("li",[e._v("目前 201712 支持 2.8 以上")])]),e._v(" "),s("h2",{attrs:{id:"docker-下安装-redis"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-下安装-redis"}},[e._v("#")]),e._v(" Docker 下安装 Redis")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("创建一个宿主机目录用来存放 redis 配置文件："),s("code",[e._v("mkdir -p /data/docker/redis/conf")])])]),e._v(" "),s("li",[s("p",[e._v("创建一个宿主机以后用来存放数据的目录："),s("code",[e._v("mkdir -p /data/docker/redis/db")])])]),e._v(" "),s("li",[s("p",[e._v("赋权："),s("code",[e._v("chmod 777 -R /data/docker/redis")])])]),e._v(" "),s("li",[s("p",[e._v("自己编写一个配置文件 "),s("code",[e._v("vim /data/docker/redis/conf/redis.conf")]),e._v("，内容如下：")])]),e._v(" "),s("li",[s("p",[e._v("Redis 默认的配置文件内容：")])])]),e._v(" "),s("div",{staticClass:"language-ini extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ini"}},[s("code",[e._v('安全情况的几个特殊配置：\nbind 127.0.0.1\nrequirepass adgredis123456\nprotected-mode yes\n\n免密情况：\nbind 0.0.0.0\nprotected-mode no\n\n其他：\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize no\nsupervised no\npidfile /data/redis_6379.pid\nloglevel notice\nlogfile ""\ndatabases 16\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /data\nslave-serve-stale-data yes\nslave-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nslave-priority 100\nappendonly no\nappendfilename "appendonly.aof"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\nlua-time-limit 5000\nslowlog-log-slower-than 10000\nslowlog-max-len 128\nlatency-monitor-threshold 0\nnotify-keyspace-events ""\nhash-max-ziplist-entries 512\nhash-max-ziplist-value 64\nlist-max-ziplist-size -2\nlist-compress-depth 0\nset-max-intset-entries 512\nzset-max-ziplist-entries 128\nzset-max-ziplist-value 64\nhll-sparse-max-bytes 3000\nactiverehashing yes\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit slave 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\nhz 10\naof-rewrite-incremental-fsync yes\n')])])]),s("ul",[s("li",[e._v("启动镜像："),s("code",[e._v("docker run -d -ti -p 6379:6379 -v /data/docker/redis/conf/redis.conf:/etc/redis/redis.conf -v /data/docker/redis/db:/data --restart always --name cloud-redis redis:3.2 redis-server /etc/redis/redis.conf")])]),e._v(" "),s("li",[e._v("查看镜像运行情况："),s("code",[e._v("docker ps")])]),e._v(" "),s("li",[e._v("进入镜像中 redis shell 交互界面："),s("code",[e._v("docker exec -it cloud-redis redis-cli -h 127.0.0.1 -p 6379 -a adgredis123456")])]),e._v(" "),s("li",[e._v("重新启动服务："),s("code",[e._v("docker restart cloud-redis")])])]),e._v(" "),s("h2",{attrs:{id:"rediscluster-集群-docker-方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rediscluster-集群-docker-方式"}},[e._v("#")]),e._v(" RedisCluster 集群（Docker 方式）")]),e._v(" "),s("h4",{attrs:{id:"redis-容器准备"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-容器准备"}},[e._v("#")]),e._v(" Redis 容器准备")]),e._v(" "),s("ul",[s("li",[e._v("目标：3 主 3 从（一般都是推荐奇数个 master）")]),e._v(" "),s("li",[e._v("最小集群数推荐是：3")]),e._v(" "),s("li",[e._v("测试机的最低配置推荐是：2C4G")]),e._v(" "),s("li",[e._v("拉取镜像："),s("code",[e._v("docker pull registry.cn-shenzhen.aliyuncs.com/youmeek/redis-to-cluster:3.2.3")])]),e._v(" "),s("li",[e._v("重新打个 tag（旧名字太长了）："),s("code",[e._v("docker tag registry.cn-shenzhen.aliyuncs.com/youmeek/redis-to-cluster:3.2.3 redis-to-cluster:3.2.3")])]),e._v(" "),s("li",[e._v("创建网段："),s("code",[e._v("docker network create --subnet=172.19.0.0/16 net-redis-to-cluster")])]),e._v(" "),s("li",[e._v("宿主机创建配置文件："),s("code",[e._v("mkdir -p /data/docker/redis-to-cluster/config && vim /data/docker/redis-to-cluster/config/redis.conf")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('bind 0.0.0.0\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised no\npidfile /var/run/redis_6379.pid\nloglevel notice\nlogfile ""\ndatabases 16\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir ./\nslave-serve-stale-data yes\nslave-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nslave-priority 100\nappendonly yes\nappendfilename "appendonly.aof"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\nlua-time-limit 5000\ncluster-enabled yes\ncluster-config-file nodes-6379.conf\ncluster-node-timeout 15000\nslowlog-log-slower-than 10000\nslowlog-max-len 128\nlatency-monitor-threshold 0\nnotify-keyspace-events ""\nhash-max-ziplist-entries 512\nhash-max-ziplist-value 64\nlist-max-ziplist-size -2\nlist-compress-depth 0\nset-max-intset-entries 512\nzset-max-ziplist-entries 128\nzset-max-ziplist-value 64\nhll-sparse-max-bytes 3000\nactiverehashing yes\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit slave 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\nhz 10\naof-rewrite-incremental-fsync yes\n')])])]),s("ul",[s("li",[e._v("赋权："),s("code",[e._v("chmod 777 -R /data/docker/redis-to-cluster/")])]),e._v(" "),s("li",[e._v("运行 6 个节点：\n"),s("ul",[s("li",[s("code",[e._v("docker run -it -d --name redis-to-cluster-1 -p 5001:6379 -v /data/docker/redis-to-cluster/config/redis.conf:/usr/redis/redis.conf --net=net-redis-to-cluster --ip 172.19.0.2 redis-to-cluster:3.2.3 bash")])]),e._v(" "),s("li",[s("code",[e._v("docker run -it -d --name redis-to-cluster-2 -p 5002:6379 -v /data/docker/redis-to-cluster/config/redis.conf:/usr/redis/redis.conf --net=net-redis-to-cluster --ip 172.19.0.3 redis-to-cluster:3.2.3 bash")])]),e._v(" "),s("li",[s("code",[e._v("docker run -it -d --name redis-to-cluster-3 -p 5003:6379 -v /data/docker/redis-to-cluster/config/redis.conf:/usr/redis/redis.conf --net=net-redis-to-cluster --ip 172.19.0.4 redis-to-cluster:3.2.3 bash")])]),e._v(" "),s("li",[s("code",[e._v("docker run -it -d --name redis-to-cluster-4 -p 5004:6379 -v /data/docker/redis-to-cluster/config/redis.conf:/usr/redis/redis.conf --net=net-redis-to-cluster --ip 172.19.0.5 redis-to-cluster:3.2.3 bash")])]),e._v(" "),s("li",[s("code",[e._v("docker run -it -d --name redis-to-cluster-5 -p 5005:6379 -v /data/docker/redis-to-cluster/config/redis.conf:/usr/redis/redis.conf --net=net-redis-to-cluster --ip 172.19.0.6 redis-to-cluster:3.2.3 bash")])]),e._v(" "),s("li",[s("code",[e._v("docker run -it -d --name redis-to-cluster-6 -p 5006:6379 -v /data/docker/redis-to-cluster/config/redis.conf:/usr/redis/redis.conf --net=net-redis-to-cluster --ip 172.19.0.7 redis-to-cluster:3.2.3 bash")])])])]),e._v(" "),s("li",[e._v("配置 redis-to-cluster-1 节点："),s("code",[e._v("docker exec -it redis-to-cluster-1 bash")]),e._v(" "),s("ul",[s("li",[e._v("启动容器的 redis："),s("code",[e._v("/usr/redis/src/redis-server /usr/redis/redis.conf")])])])]),e._v(" "),s("li",[e._v("其他 5 个节点一样进行启动。")])]),e._v(" "),s("h4",{attrs:{id:"创建-cluster-集群-通过-redis-trib-rb"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建-cluster-集群-通过-redis-trib-rb"}},[e._v("#")]),e._v(" 创建 Cluster 集群（通过 redis-trib.rb）")]),e._v(" "),s("ul",[s("li",[e._v("配置 redis-to-cluster-1 节点（或者选择其他任意一个节点）："),s("code",[e._v("docker exec -it redis-to-cluster-1 bash")])]),e._v(" "),s("li",[s("code",[e._v("mkdir -p /usr/redis/cluster")])]),e._v(" "),s("li",[s("code",[e._v("cp /usr/redis/src/redis-trib.rb /usr/redis/cluster/")])]),e._v(" "),s("li",[s("code",[e._v("cd /usr/redis/cluster/")])]),e._v(" "),s("li",[e._v("创建 Cluster 集群（会有交互）（镜像中已经安装了 ruby 了）："),s("code",[e._v("./redis-trib.rb create --replicas 1 172.19.0.2:6379 172.19.0.3:6379 172.19.0.4:6379 172.19.0.5:6379 172.19.0.6:6379 172.19.0.7:6379")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("--replicas 1")]),e._v(" 表示为每个主节点创建一个从节点")]),e._v(" "),s("li",[e._v("如果正常的话，会出现下面内容：")])])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(">>> Creating cluster\n>>> Performing hash slots allocation on 6 nodes...\nUsing 3 masters:\n172.19.0.2:6379\n172.19.0.3:6379\n172.19.0.4:6379\nAdding replica 172.19.0.5:6379 to 172.19.0.2:6379\nAdding replica 172.19.0.6:6379 to 172.19.0.3:6379\nAdding replica 172.19.0.7:6379 to 172.19.0.4:6379\nM: 9c1c64b18bfc2a0586be2089f13c330787c1f67b 172.19.0.2:6379\n   slots:0-5460 (5461 slots) master\nM: 35a633853329c9ff25bb93a7ce9192699c2ab6a8 172.19.0.3:6379\n   slots:5461-10922 (5462 slots) master\nM: 8ea2bfeeeda939abb43e96a95a990bcc55c10389 172.19.0.4:6379\n   slots:10923-16383 (5461 slots) master\nS: 9cb00acba065120ea96834f4352c72bb50aa37ac 172.19.0.5:6379\n   replicates 9c1c64b18bfc2a0586be2089f13c330787c1f67b\nS: 8e2a4bb11e97adf28427091a621dbbed66c61001 172.19.0.6:6379\n   replicates 35a633853329c9ff25bb93a7ce9192699c2ab6a8\nS: 5d0fe968559af3035d8d64ab598f2841e5f3a059 172.19.0.7:6379\n   replicates 8ea2bfeeeda939abb43e96a95a990bcc55c10389\nCan I set the above configuration? (type 'yes' to accept): yes\n>>> Nodes configuration updated\n>>> Assign a different config epoch to each node\n>>> Sending CLUSTER MEET messages to join the cluster\nWaiting for the cluster to join......\n>>> Performing Cluster Check (using node 172.19.0.2:6379)\nM: 9c1c64b18bfc2a0586be2089f13c330787c1f67b 172.19.0.2:6379\n   slots:0-5460 (5461 slots) master\nM: 35a633853329c9ff25bb93a7ce9192699c2ab6a8 172.19.0.3:6379\n   slots:5461-10922 (5462 slots) master\nM: 8ea2bfeeeda939abb43e96a95a990bcc55c10389 172.19.0.4:6379\n   slots:10923-16383 (5461 slots) master\nM: 9cb00acba065120ea96834f4352c72bb50aa37ac 172.19.0.5:6379\n   slots: (0 slots) master\n   replicates 9c1c64b18bfc2a0586be2089f13c330787c1f67b\nM: 8e2a4bb11e97adf28427091a621dbbed66c61001 172.19.0.6:6379\n   slots: (0 slots) master\n   replicates 35a633853329c9ff25bb93a7ce9192699c2ab6a8\nM: 5d0fe968559af3035d8d64ab598f2841e5f3a059 172.19.0.7:6379\n   slots: (0 slots) master\n   replicates 8ea2bfeeeda939abb43e96a95a990bcc55c10389\n[OK] All nodes agree about slots configuration.\n>>> Check for open slots...\n>>> Check slots coverage...\n[OK] All 16384 slots covered.\n")])])]),s("ul",[s("li",[e._v("连接集群测试：\n"),s("ul",[s("li",[e._v("进入随便一个节点："),s("code",[e._v("docker exec -it redis-to-cluster-1 bash")])]),e._v(" "),s("li",[s("code",[e._v("/usr/redis/src/redis-cli -c")])]),e._v(" "),s("li",[e._v("查看集群情况："),s("code",[e._v("cluster nodes")])]),e._v(" "),s("li",[e._v("写入数据："),s("code",[e._v("set myKey myValue")]),e._v("，如果成功会返回："),s("code",[e._v("Redirected to slot [16281] located at 172.19.0.4:6379")]),e._v("，可以推断它是 redis-to-cluster-3 容器")]),e._v(" "),s("li",[e._v("暂定掉 redis-to-cluster-3 容器："),s("code",[e._v("docker pause redis-to-cluster-3")])]),e._v(" "),s("li",[e._v("重新连接："),s("code",[e._v("/usr/redis/src/redis-cli -c")])]),e._v(" "),s("li",[e._v("查看集群情况："),s("code",[e._v("cluster nodes")])]),e._v(" "),s("li",[e._v("获取值："),s("code",[e._v("get myKey")])]),e._v(" "),s("li",[e._v("重新启动 redis-to-cluster-3："),s("code",[e._v("docker unpause redis-to-cluster-3")])]),e._v(" "),s("li",[e._v("查看集群情况："),s("code",[e._v("cluster nodes")])])])]),e._v(" "),s("li",[e._v("Spring Boot 项目 Docker 容器访问 RedisCluster\n"),s("ul",[s("li",[e._v("application.yml 配置的 IP 地址：172.19.0.2 等")]),e._v(" "),s("li",[e._v("docker 容器启动增加 "),s("code",[e._v("--net=host")]),e._v(" 使用宿主机网络")])])])]),e._v(" "),s("h2",{attrs:{id:"redis-编译安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-编译安装"}},[e._v("#")]),e._v(" Redis 编译安装")]),e._v(" "),s("ul",[s("li",[e._v("Redis 安装\n"),s("ul",[s("li",[e._v("官网："),s("a",{attrs:{href:"http://redis.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://redis.io/"),s("OutboundLink")],1)]),e._v(" "),s("li",[e._v("官网下载："),s("a",{attrs:{href:"http://redis.io/download",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://redis.io/download"),s("OutboundLink")],1)]),e._v(" "),s("li",[e._v("官网 Github 地址："),s("a",{attrs:{href:"https://github.com/redis",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/redis"),s("OutboundLink")],1)]),e._v(" "),s("li",[e._v("此时（20160212） Redis 最新稳定版本为："),s("strong",[e._v("3.0.7")])]),e._v(" "),s("li",[e._v("官网帮助中心："),s("a",{attrs:{href:"http://redis.io/documentation",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://redis.io/documentation"),s("OutboundLink")],1)]),e._v(" "),s("li",[e._v("Redis 下载（/usr/local）："),s("code",[e._v("wget http://download.redis.io/releases/redis-3.0.7.tar.gz")]),e._v(" （大小：1.4 M）\n"),s("ul",[s("li",[e._v("安装依赖包："),s("code",[e._v("yum install -y gcc-c++ tcl")])]),e._v(" "),s("li",[e._v("解压："),s("code",[e._v("tar zxvf redis-3.0.7.tar.gz")])]),e._v(" "),s("li",[e._v("进入解压后目录："),s("code",[e._v("cd /usr/local/redis-3.0.7/")])]),e._v(" "),s("li",[e._v("编译："),s("code",[e._v("make")])]),e._v(" "),s("li",[e._v("编译安装："),s("code",[e._v("make install")]),e._v(" "),s("ul",[s("li",[e._v("安装完之后会在："),s("code",[e._v("/usr/local/bin")]),e._v(" 目录下生成好几个 redis 相关的文件")])])]),e._v(" "),s("li",[e._v("复制配置文件："),s("code",[e._v("cp /usr/local/redis-3.0.7/redis.conf /etc/")])]),e._v(" "),s("li",[e._v("修改配置："),s("code",[e._v("vim /etc/redis.conf")]),e._v(" "),s("ul",[s("li",[e._v("把旧值："),s("code",[e._v("daemonize no")])]),e._v(" "),s("li",[e._v("改为新值："),s("code",[e._v("daemonize yes")])])])]),e._v(" "),s("li",[e._v("启动："),s("code",[e._v("/usr/local/bin/redis-server /etc/redis.conf")])]),e._v(" "),s("li",[e._v("关闭："),s("code",[e._v("redis-cli -h 127.0.0.1 -p 6379 shutdown")])]),e._v(" "),s("li",[e._v("关闭（带密码）："),s("code",[e._v("redis-cli -h 127.0.0.1 -p 6379 -a 123456 shutdown")])]),e._v(" "),s("li",[e._v("查看是否启动："),s("code",[e._v("ps -ef | grep redis")])]),e._v(" "),s("li",[e._v("进入客户端："),s("code",[e._v("redis-cli")])]),e._v(" "),s("li",[e._v("关闭客户端："),s("code",[e._v("redis-cli shutdown")])]),e._v(" "),s("li",[e._v("开机启动配置："),s("code",[e._v('echo "/usr/local/bin/redis-server /etc/redis.conf" >> /etc/rc.local')])]),e._v(" "),s("li",[e._v("开放防火墙端口：\n"),s("ul",[s("li",[e._v("添加规则："),s("code",[e._v("iptables -I INPUT -p tcp -m tcp --dport 6379 -j ACCEPT")])]),e._v(" "),s("li",[e._v("保存规则："),s("code",[e._v("service iptables save")])]),e._v(" "),s("li",[e._v("重启 iptables："),s("code",[e._v("service iptables restart")])])])])])])])])]),e._v(" "),s("h2",{attrs:{id:"redis-3-0-7-配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-3-0-7-配置"}},[e._v("#")]),e._v(" Redis-3.0.7 配置")]),e._v(" "),s("ul",[s("li",[e._v("编辑配置文件："),s("code",[e._v("vim /etc/redis.conf")])]),e._v(" "),s("li",[e._v("Redis 默认的配置文件内容：")])]),e._v(" "),s("div",{staticClass:"language-ini extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ini"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 是否以后台daemon方式运行，默认是 no，一般我们会改为 yes")]),e._v('\ndaemonize no\npidfile /var/run/redis.pid\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 0\nloglevel notice\nlogfile ""\n'),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 开启数据库的数量，Redis 是有数据库概念的，默认是 16 个，数字从 0 ~ 15")]),e._v('\ndatabases 16\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir ./\nslave-serve-stale-data yes\nslave-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nslave-priority 100\nappendonly no\nappendfilename "appendonly.aof"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\nlua-time-limit 5000\nslowlog-log-slower-than 10000\nslowlog-max-len 128\nlatency-monitor-threshold 0\nnotify-keyspace-events ""\nhash-max-ziplist-entries 512\nhash-max-ziplist-value 64\nlist-max-ziplist-entries 512\nlist-max-ziplist-value 64\nset-max-intset-entries 512\nzset-max-ziplist-entries 128\nzset-max-ziplist-value 64\nhll-sparse-max-bytes 3000\nactiverehashing yes\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit slave 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\nhz 10\naof-rewrite-incremental-fsync yes\n')])])]),s("h2",{attrs:{id:"redis-3-2-8-配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-3-2-8-配置"}},[e._v("#")]),e._v(" Redis-3.2.8 配置")]),e._v(" "),s("ul",[s("li",[e._v("编辑配置文件："),s("code",[e._v("vim /etc/redis.conf")])]),e._v(" "),s("li",[e._v("Redis 默认的配置文件内容：")])]),e._v(" "),s("div",{staticClass:"language-ini extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ini"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 默认绑定是：127.0.0.1，这样就只能本机才能连上，为了让所有机子连上，这里需要改为：0.0.0.0")]),e._v('\nbind 0.0.0.0\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised no\npidfile /var/run/redis_6379.pid\nloglevel notice\nlogfile ""\ndatabases 16\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir ./\nslave-serve-stale-data yes\nslave-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nslave-priority 100\nappendonly no\nappendfilename "appendonly.aof"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\nlua-time-limit 5000\nslowlog-log-slower-than 10000\nslowlog-max-len 128\nlatency-monitor-threshold 0\nnotify-keyspace-events ""\nhash-max-ziplist-entries 512\nhash-max-ziplist-value 64\nlist-max-ziplist-size -2\nlist-compress-depth 0\nset-max-intset-entries 512\nzset-max-ziplist-entries 128\nzset-max-ziplist-value 64\nhll-sparse-max-bytes 3000\nactiverehashing yes\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit slave 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\nhz 10\naof-rewrite-incremental-fsync yes\n')])])]),s("h2",{attrs:{id:"设置-redis-请求密码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设置-redis-请求密码"}},[e._v("#")]),e._v(" 设置 Redis 请求密码")]),e._v(" "),s("ul",[s("li",[e._v("打开 "),s("code",[e._v("vim /etc/redis.conf")]),e._v(" 配置文件，找到默认是被注释的这一行："),s("code",[e._v("# requirepass foobared")])]),e._v(" "),s("li",[e._v("去掉注释，把 "),s("code",[e._v("foobared")]),e._v(" 改为你想要设置的密码，比如我打算设置为：123456，所以我改为："),s("code",[e._v("requirepass 123456")])]),e._v(" "),s("li",[e._v("修改之后重启下服务")]),e._v(" "),s("li",[e._v("有了密码之后，进入客户端，就得这样访问："),s("code",[e._v("redis-cli -h 127.0.0.1 -p 6379 -a 123456")])]),e._v(" "),s("li",[e._v("如果用 IP 进入客户端，但是报："),s("code",[e._v("Could not connect to Redis at 192.168.1.121:6379: Connection refused")]),e._v(" "),s("ul",[s("li",[e._v("原因：Redis 默认只允许本机访问，可是有时候我们也需要 Redis 被远程访问。")]),e._v(" "),s("li",[e._v("解决办法：\n"),s("ul",[s("li",[e._v("修改 Redis 配置文件："),s("code",[e._v("vim /etc/redis.conf")]),e._v("\n       - 找到 bind 那行配置，默认是（需要注意的是配置文件中除了注释还有一个默认开启的地方，所以不要漏掉）："),s("code",[e._v("# bind 127.0.0.1")])]),e._v(" "),s("li",[e._v("去掉 # 注释并改为："),s("code",[e._v("bind 0.0.0.0")])])])])])])]),e._v(" "),s("h2",{attrs:{id:"redis-常用命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-常用命令"}},[e._v("#")]),e._v(" Redis 常用命令")]),e._v(" "),s("ul",[s("li",[e._v("命令是不区分大小写的，但是这里为了方便和后面的 key value 进行区分所以我全部写大写，你也可以用小写。\n"),s("ul",[s("li",[e._v("但是需要注意的是：key 是完全区分大小写的，比如 key=codeBlog 和 key=codeblog 是两个键值")])])]),e._v(" "),s("li",[e._v("官网命令列表："),s("a",{attrs:{href:"http://redis.io/commands",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://redis.io/commands"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("code",[e._v("SET key value")]),e._v("，设值。eg："),s("code",[e._v("SET myblog www.youmeek.com")])]),e._v(" "),s("li",[s("code",[e._v("GET key")]),e._v("，取值")]),e._v(" "),s("li",[s("code",[e._v("SELECT 0")]),e._v("，切换数据库")]),e._v(" "),s("li",[s("code",[e._v("INCR key")]),e._v("，递增数字")]),e._v(" "),s("li",[s("code",[e._v("DECR key")]),e._v("，递减数字")]),e._v(" "),s("li",[s("code",[e._v("KEYS *")]),e._v("，查看当前数据库下所有的 key")]),e._v(" "),s("li",[s("code",[e._v("APPEND key value")]),e._v("，给尾部追加内容，如果要追加的 key 不存在，则相当于 SET key value")]),e._v(" "),s("li",[s("code",[e._v("STRLEN key")]),e._v("，返回键值的长度，如果键不存在则返回 0")]),e._v(" "),s("li",[s("code",[e._v("MSET key1 value1 key2 value2")]),e._v("，同时设置多值")]),e._v(" "),s("li",[s("code",[e._v("MGET key1 value1 key2 value2")]),e._v("，同时取多值")]),e._v(" "),s("li",[s("code",[e._v("EXPIRE key 27")]),e._v("，设置指定键的生存时间，27 的单位是秒")]),e._v(" "),s("li",[s("code",[e._v("TTL key")]),e._v("，查看键的剩余生存时间\n"),s("ul",[s("li",[e._v("返回 -2，表示不存在，过了生存时间后被删除")]),e._v(" "),s("li",[e._v("返回 -1，表示没有生存时间，永久存储")]),e._v(" "),s("li",[e._v("返回正整数，表示还剩下对应的生存时间")])])]),e._v(" "),s("li",[s("code",[e._v("PERSIST key")]),e._v("，清除生成时间，重新变成永久存储（重新设置 key 的值也可以起到清除生存时间的效果）")]),e._v(" "),s("li",[s("code",[e._v("FLUSHDB")]),e._v("，清空当前数据库所有键值")]),e._v(" "),s("li",[s("code",[e._v("FLUSHALL")]),e._v("，清空所有数据库的所有键值")])]),e._v(" "),s("h2",{attrs:{id:"把-redis-添加到系统服务中"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#把-redis-添加到系统服务中"}},[e._v("#")]),e._v(" 把 redis 添加到系统服务中")]),e._v(" "),s("ul",[s("li",[e._v("新建文件："),s("code",[e._v("vim /etc/init.d/redis")])]),e._v(" "),s("li",[e._v("添加如下内容：")])]),e._v(" "),s("div",{staticClass:"language-nginx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nginx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#!/bin/sh  ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# redis - this script starts and stops the redis-server daemon  ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# chkconfig:   - 85 15  ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# description:  Redis is a persistent key-value database  ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# processname: redis-server  ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# config:      /usr/local/redis-2.4.X/bin/redis-server  ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# config:      /usr/local/ /redis-2.4.X/etc/redis.conf  ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Source function library.  ")]),e._v("\n. /etc/rc.d/init.d/functions  \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Source networking configuration.  ")]),e._v("\n. /etc/sysconfig/network  \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Check that networking is up.  ")]),e._v('\n[ "$NETWORKING" = "no" ] && '),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("exit")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("  \nredis="),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/usr/local/bin/redis-server"')]),e._v(" \nprog=$(basename "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$redis")]),e._v(")  \nREDIS_CONF_FILE="),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/etc/redis.conf"')]),e._v(" \n[ -f /etc/sysconfig/redis ] && . /etc/sysconfig/redis  \nlockfile=/var/lock/subsys/redis  \nstart()")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v('  \n    [ -x $redis ] || exit 5  \n    [ -f $REDIS_CONF_FILE ] || exit 6  \n    echo -n $"Starting $prog: "  \n    daemon $redis $REDIS_CONF_FILE  \n    retval=$?  \n    echo  \n    [ $retval -eq 0 ] && touch $lockfile  \n    return $retval  \n'),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("  \n"),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("stop()")])]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v('  \n    echo -n $"Stopping $prog: "  \n    killproc $prog -QUIT  \n    retval=$?  \n    echo  \n    [ $retval -eq 0 ] && rm -f $lockfile  \n    return $retval  \n'),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("  \n"),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("restart()")])]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("  \n    stop  \n    start  \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("  \n"),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("reload()")])]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v('  \n    echo -n $"Reloading $prog: "  \n    killproc $redis -HUP  \n    RETVAL=$?  \n    echo  \n'),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("  \n"),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("force_reload()")])]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("  \n    restart  \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("  \n"),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("rh_status()")])]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("  \n    status $prog  \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("  \n"),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("rh_status_q()")])]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("  \n    rh_status >/dev/null 2>&1  \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("  \n"),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("case")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$1")]),e._v('"')]),e._v(" in  \n    start)  \n        rh_status_q && exit "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("  \n        "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$1")])]),e._v("  \n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("  \n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("stop)")]),e._v("  \n        rh_status_q || exit "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("  \n        "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$1")])]),e._v("  \n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("  \n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("restart|configtest)")]),e._v("  \n        "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$1")])]),e._v("  \n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("  \n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("reload)")]),e._v("  \n        rh_status_q || exit "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("7")]),e._v("  \n        "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$1")])]),e._v("  \n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("  \n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("force-reload)")]),e._v("  \n        force_reload")]),e._v("  \n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("  \n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("status)")]),e._v("  \n        rh_status")]),e._v("  \n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("  \n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("condrestart|try-restart)")]),e._v("  \n        rh_status_q || exit "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")])]),e._v("  \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v('  \n    *)  \n        echo $"Usage: $0 '),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("start|stop|status|restart|condrestart|try-restart| reload|orce-reload"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v('"  \n        exit 2  \nesac\n')])])]),s("ul",[s("li",[e._v("修改权限："),s("code",[e._v("chmod 755 /etc/init.d/redis")])]),e._v(" "),s("li",[e._v("启动服务："),s("code",[e._v("service redis start")])]),e._v(" "),s("li",[e._v("停止服务："),s("code",[e._v("service redis stop")])]),e._v(" "),s("li",[e._v("重启服务："),s("code",[e._v("service ngredisnx restart")])])]),e._v(" "),s("h2",{attrs:{id:"redis-客户端"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-客户端"}},[e._v("#")]),e._v(" Redis 客户端")]),e._v(" "),s("ul",[s("li",[e._v("Java："),s("a",{attrs:{href:"http://redis.io/clients#java",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://redis.io/clients#java"),s("OutboundLink")],1),e._v(" "),s("ul",[s("li",[e._v("Jedis 官网："),s("a",{attrs:{href:"https://github.com/xetorthio/jedis",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/xetorthio/jedis"),s("OutboundLink")],1)])])])]),e._v(" "),s("h2",{attrs:{id:"redis-gui-管理工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-gui-管理工具"}},[e._v("#")]),e._v(" Redis GUI 管理工具")]),e._v(" "),s("ul",[s("li",[e._v("Redis Desktop Manager\n"),s("ul",[s("li",[e._v("官网："),s("a",{attrs:{href:"http://redisdesktop.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://redisdesktop.com/"),s("OutboundLink")],1)]),e._v(" "),s("li",[e._v("官网下载："),s("a",{attrs:{href:"http://redisdesktop.com/download",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://redisdesktop.com/download"),s("OutboundLink")],1)]),e._v(" "),s("li",[e._v("效果如下图：")]),e._v(" "),s("li",[s("img",{attrs:{src:t(345),alt:"Redis Desktop Manager"}})])])])]),e._v(" "),s("h2",{attrs:{id:"redis-主从-主从从-配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-主从-主从从-配置"}},[e._v("#")]),e._v(" Redis 主从（主从从）配置")]),e._v(" "),s("h3",{attrs:{id:"redis-主从架构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-主从架构"}},[e._v("#")]),e._v(" Redis 主从架构")]),e._v(" "),s("ul",[s("li",[e._v("假设有两台服务器，一台做主，一台做从\n"),s("ul",[s("li",[e._v("Redis 主信息：\n"),s("ul",[s("li",[e._v("IP："),s("strong",[e._v("12.168.1.114")]),e._v("=")]),e._v(" "),s("li",[e._v("端口："),s("strong",[e._v("6379")])])])]),e._v(" "),s("li",[e._v("Redis 从信息：\n"),s("ul",[s("li",[e._v("IP："),s("strong",[e._v("12.168.1.115")])]),e._v(" "),s("li",[e._v("端口："),s("strong",[e._v("6379")])])])])])]),e._v(" "),s("li",[e._v("编辑从机的 Redis 配置文件，找到 210 行（大概），默认这一行应该是注释的："),s("code",[e._v("# slaveof <masterip> <masterport>")])]),e._v(" "),s("li",[e._v("我们需要去掉该注释，并且填写我们自己的主机的 IP 和 端口，比如："),s("code",[e._v("slaveof 192.168.1.114 6379")])]),e._v(" "),s("li",[e._v("配置完成后重启从机 Redis 服务")]),e._v(" "),s("li",[e._v("重启完之后，进入主机的 redis-cli 状态下，输入："),s("code",[e._v("INFO replication")]),e._v(" "),s("ul",[s("li",[e._v("可以查询到当前主机的 redis 处于什么角色，有哪些从机已经连上主机。")])])]),e._v(" "),s("li",[e._v("此时已经完成了主从配置，我们可以测试下：\n"),s("ul",[s("li",[e._v("我们进入主机的 redis-cli 状态，然后 set 某个值，比如："),s("code",[e._v("set myblog YouMeek.com")])])])]),e._v(" "),s("li",[e._v("我们切换进入从机的 redis-cli 的状态下，获取刚刚设置的值看是否存在："),s("code",[e._v("get myblog")]),e._v("，此时，我们可以发现是可以获取到值的。")]),e._v(" "),s("li",[e._v("但是有一个需要注意的：从库不具备写入数据能力，不然会报错。 从库只有只读能力。")])]),e._v(" "),s("h3",{attrs:{id:"redis主从从架构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis主从从架构"}},[e._v("#")]),e._v(" Redis主从从架构")]),e._v(" "),s("ul",[s("li",[e._v("Redis 主从从的意思：看桌面上的截图。")]),e._v(" "),s("li",[e._v("优点，除了减少主库连接的压力，还有可以关掉主库的持久化功能，把持久化的功能交给从库进行处理。")]),e._v(" "),s("li",[e._v("第一个从库配置的信息是连上主库，后面的第二个从库配置的连接信息是连上第一个从库， 假如还有第三个从库的话，我们可以把第三个从库的配置信息连上第二个从库上，以此类推。")])]),e._v(" "),s("h2",{attrs:{id:"redis-3-主-2-从-3-哨兵-配置集群-ha-高可用、故障转移"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-3-主-2-从-3-哨兵-配置集群-ha-高可用、故障转移"}},[e._v("#")]),e._v(" Redis 3 主 2 从 3 哨兵--配置集群+HA（高可用、故障转移）")]),e._v(" "),s("ul",[s("li",[e._v("3 主 2 从 3 哨兵（平均每台机子是：1 主 2 从 3 哨兵）")]),e._v(" "),s("li",[e._v("一个健康的集群部署，至少需要 3 个 Sentinel 实例，官网（Example 2: basic setup with three boxes）："),s("a",{attrs:{href:"https://redis.io/topics/sentinel",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://redis.io/topics/sentinel"),s("OutboundLink")],1)]),e._v(" "),s("li",[e._v("这里使用了 3 台阿里云服务器，系统：CentOS 6.8")]),e._v(" "),s("li",[e._v("3 主：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("192.168.1.1\n")])])]),s("p",[e._v("先做 Redis 集群，然后写个 Spring Data Redis 测试是否可以正常使用该集群")]),e._v(" "),s("ul",[s("li",[e._v("每台服务器各有一个 Redis 程序，然后有 3 个不同配置文件，启动 Redis 的时候指定各自的配置文件，依次表示 3 个 Redis 程序。")]),e._v(" "),s("li",[e._v("先关闭防火墙，避免各种端口未开放问题")]),e._v(" "),s("li",[e._v("Redis 目前支持主从复制，但是主挂掉后，从也只能只读，所以需要在主挂掉后，从一个其中一个从节点中升级到主，这里用到的是：redis sentinel")]),e._v(" "),s("li",[e._v("漂移 IP 这里用到 keepalived")])]),e._v(" "),s("h2",{attrs:{id:"windows-版本的-redis"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#windows-版本的-redis"}},[e._v("#")]),e._v(" Windows 版本的 Redis")]),e._v(" "),s("ul",[s("li",[e._v("Windows 是别人改造的版本，需要到这里下载："),s("a",{attrs:{href:"https://github.com/MSOpenTech/redis/releases",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/MSOpenTech/redis/releases"),s("OutboundLink")],1)]),e._v(" "),s("li",[e._v("使用 "),s("code",[e._v(".msi")]),e._v(" 后缀的文件进行安装，此安装包自带安装 Windows 服务")]),e._v(" "),s("li",[e._v("配置文件也跟原版本不一样，叫做："),s("code",[e._v("redis.windows.conf")])])]),e._v(" "),s("h2",{attrs:{id:"redis-info"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-info"}},[e._v("#")]),e._v(" Redis Info")]),e._v(" "),s("ul",[s("li",[e._v("客户端下命令行："),s("code",[e._v("info")]),e._v(" "),s("ul",[s("li",[e._v("参考："),s("a",{attrs:{href:"http://redisdoc.com/server/info.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://redisdoc.com/server/info.html"),s("OutboundLink")],1)])])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server 部分记录了 Redis 服务器的信息，它包含以下域：\n\nredis_version : Redis 服务器版本\nredis_git_sha1 : Git SHA1\nredis_git_dirty : Git dirty flag\nos : Redis 服务器的宿主操作系统\narch_bits : 架构（32 或 64 位）\nmultiplexing_api : Redis 所使用的事件处理机制\ngcc_version : 编译 Redis 时所使用的 GCC 版本\nprocess_id : 服务器进程的 PID\nrun_id : Redis 服务器的随机标识符（用于 Sentinel 和集群）\ntcp_port : TCP/IP 监听端口\nuptime_in_seconds : 自 Redis 服务器启动以来，经过的秒数\nuptime_in_days : 自 Redis 服务器启动以来，经过的天数\nlru_clock : 以分钟为单位进行自增的时钟，用于 LRU 管理\nclients 部分记录了已连接客户端的信息，它包含以下域：\n\nconnected_clients : 已连接客户端的数量（不包括通过从属服务器连接的客户端）\nclient_longest_output_list : 当前连接的客户端当中，最长的输出列表\nclient_longest_input_buf : 当前连接的客户端当中，最大输入缓存\nblocked_clients : 正在等待阻塞命令（BLPOP、BRPOP、BRPOPLPUSH）的客户端的数量\nmemory 部分记录了服务器的内存信息，它包含以下域：\n\nused_memory : 由 Redis 分配器分配的内存总量，以字节（byte）为单位\nused_memory_human : 以人类可读的格式返回 Redis 分配的内存总量\nused_memory_rss : 从操作系统的角度，返回 Redis 已分配的内存总量（俗称常驻集大小）。这个值和 top 、 ps 等命令的输出一致。\nused_memory_peak : Redis 的内存消耗峰值（以字节为单位）\nused_memory_peak_human : 以人类可读的格式返回 Redis 的内存消耗峰值\nused_memory_lua : Lua 引擎所使用的内存大小（以字节为单位）\nmem_fragmentation_ratio : used_memory_rss 和 used_memory 之间的比率\nmem_allocator : 在编译时指定的， Redis 所使用的内存分配器。可以是 libc 、 jemalloc 或者 tcmalloc 。\n")])])]),s("ul",[s("li",[e._v("常关注信息：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("used_memory_rss_human：系统给redis分配的内存（即常驻内存）\nused_memory_peak_human : Redis 的内存消耗峰值\nused_memory_lua_human : 系统内存大小\nexpired_keys : 过期的的键数量\nevicted_keys : 因为最大内存容量限制而被驱逐（evict）的键数量\nused_cpu_sys_children : Redis 后台进程在 内核态 消耗的 CPU\nused_cpu_user_children : Redis 后台进程在 用户态 消耗的 CPU\n")])])]),s("h2",{attrs:{id:"redis-基准压力测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-基准压力测试"}},[e._v("#")]),e._v(" Redis 基准压力测试")]),e._v(" "),s("ul",[s("li",[e._v("默认安装包下就自带")]),e._v(" "),s("li",[e._v("官网文档："),s("a",{attrs:{href:"https://redis.io/topics/benchmarks",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://redis.io/topics/benchmarks"),s("OutboundLink")],1)]),e._v(" "),s("li",[e._v("运行："),s("code",[e._v("redis-benchmark -q -n 100000")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("-q")]),e._v(" 表示 quiet 安静执行，结束后直接输出结果即可")]),e._v(" "),s("li",[s("code",[e._v("-n 100000")]),e._v(" 请求 10 万次")])])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("PING_INLINE: 62189.05 requests per second\nPING_BULK: 68634.18 requests per second\nSET: 58241.12 requests per second\nGET: 65445.03 requests per second\nINCR: 57703.40 requests per second\nLPUSH: 61199.51 requests per second\nRPUSH: 68119.89 requests per second\nLPOP: 58309.04 requests per second\nRPOP: 63775.51 requests per second\nSADD: 58479.53 requests per second\nHSET: 61500.61 requests per second\nSPOP: 58241.12 requests per second\nLPUSH (needed to benchmark LRANGE): 59523.81 requests per second\nLRANGE_100 (first 100 elements): 60350.03 requests per second\nLRANGE_300 (first 300 elements): 57636.89 requests per second\nLRANGE_500 (first 450 elements): 63251.11 requests per second\nLRANGE_600 (first 600 elements): 58479.53 requests per second\nMSET (10 keys): 56401.58 requests per second\n")])])]),s("ul",[s("li",[e._v("只测试特定类型："),s("code",[e._v("redis-benchmark -t set,lpush -n 100000 -q")])])]),e._v(" "),s("h2",{attrs:{id:"资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#资料"}},[e._v("#")]),e._v(" 资料")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"http://yanshisan.blog.51cto.com/7879234/1377992",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://yanshisan.blog.51cto.com/7879234/1377992"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://segmentfault.com/a/1190000002685224",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://segmentfault.com/a/1190000002685224"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"http://itbilu.com/linux/management/4kB2ninp.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://itbilu.com/linux/management/4kB2ninp.html"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"http://keenwon.com/1335.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://keenwon.com/1335.html"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=n.exports}}]);